'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.ComponentModel.ToolboxItem(True), _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 System.Xml.Serialization.XmlRootAttribute("ScheduleDataset"), _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Public Class ScheduleDataset
  Inherits System.Data.DataSet

  Private tableROOM As ROOMDataTable

  Private tableAPPOINTMENT As APPOINTMENTDataTable

  Private tableAPPOINTMENT_CATEGORY As APPOINTMENT_CATEGORYDataTable

  Private tableAPPOINTMENT_PROVIDER As APPOINTMENT_PROVIDERDataTable

  Private tableCATEGORY As CATEGORYDataTable

  Private tablePROVIDER As PROVIDERDataTable

  Private relationFK_ROOM_APPOINTMENT As System.Data.DataRelation

  Private relationFK_CATEGORY_APPOINTMENT_CATEGORY As System.Data.DataRelation

  Private relationFK_APPOINTMENT_APPOINTMENT_CATEGORY As System.Data.DataRelation

  Private relationFK_PROVIDER_APPOINTMENT_PROVIDER As System.Data.DataRelation

  Private relationFK_APPOINTMENT_APPOINTMENT_PROVIDER As System.Data.DataRelation

  Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Public Sub New()
    MyBase.New()
    Me.BeginInit()
    Me.InitClass()
    Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
    AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
    AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
    Me.EndInit()
  End Sub

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
    MyBase.New(info, context, False)
    If (Me.IsBinarySerialized(info, context) = True) Then
      Me.InitVars(False)
      Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
      AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
      AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
      Return
    End If
    Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
    If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
      Dim ds As System.Data.DataSet = New System.Data.DataSet
      ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
      If (Not (ds.Tables("ROOM")) Is Nothing) Then
        MyBase.Tables.Add(New ROOMDataTable(ds.Tables("ROOM")))
      End If
      If (Not (ds.Tables("APPOINTMENT")) Is Nothing) Then
        MyBase.Tables.Add(New APPOINTMENTDataTable(ds.Tables("APPOINTMENT")))
      End If
      If (Not (ds.Tables("APPOINTMENT_CATEGORY")) Is Nothing) Then
        MyBase.Tables.Add(New APPOINTMENT_CATEGORYDataTable(ds.Tables("APPOINTMENT_CATEGORY")))
      End If
      If (Not (ds.Tables("APPOINTMENT_PROVIDER")) Is Nothing) Then
        MyBase.Tables.Add(New APPOINTMENT_PROVIDERDataTable(ds.Tables("APPOINTMENT_PROVIDER")))
      End If
      If (Not (ds.Tables("CATEGORY")) Is Nothing) Then
        MyBase.Tables.Add(New CATEGORYDataTable(ds.Tables("CATEGORY")))
      End If
      If (Not (ds.Tables("PROVIDER")) Is Nothing) Then
        MyBase.Tables.Add(New PROVIDERDataTable(ds.Tables("PROVIDER")))
      End If
      Me.DataSetName = ds.DataSetName
      Me.Prefix = ds.Prefix
      Me.Namespace = ds.Namespace
      Me.Locale = ds.Locale
      Me.CaseSensitive = ds.CaseSensitive
      Me.EnforceConstraints = ds.EnforceConstraints
      Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
      Me.InitVars()
    Else
      Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
    End If
    Me.GetSerializationData(info, context)
    Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
    AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
    AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
  End Sub

  <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   System.ComponentModel.Browsable(False), _
   System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property ROOM() As ROOMDataTable
    Get
      Return Me.tableROOM
    End Get
  End Property

  <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   System.ComponentModel.Browsable(False), _
   System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property APPOINTMENT() As APPOINTMENTDataTable
    Get
      Return Me.tableAPPOINTMENT
    End Get
  End Property

  <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   System.ComponentModel.Browsable(False), _
   System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property APPOINTMENT_CATEGORY() As APPOINTMENT_CATEGORYDataTable
    Get
      Return Me.tableAPPOINTMENT_CATEGORY
    End Get
  End Property

  <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   System.ComponentModel.Browsable(False), _
   System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property APPOINTMENT_PROVIDER() As APPOINTMENT_PROVIDERDataTable
    Get
      Return Me.tableAPPOINTMENT_PROVIDER
    End Get
  End Property

  <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   System.ComponentModel.Browsable(False), _
   System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property CATEGORY() As CATEGORYDataTable
    Get
      Return Me.tableCATEGORY
    End Get
  End Property

  <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   System.ComponentModel.Browsable(False), _
   System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property PROVIDER() As PROVIDERDataTable
    Get
      Return Me.tablePROVIDER
    End Get
  End Property

  <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   System.ComponentModel.BrowsableAttribute(True), _
   System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)> _
  Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
    Get
      Return Me._schemaSerializationMode
    End Get
    Set(ByVal value As System.Data.SchemaSerializationMode)
      Me._schemaSerializationMode = value
    End Set
  End Property

  <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
  Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
    Get
      Return MyBase.Tables
    End Get
  End Property

  <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
  Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
    Get
      Return MyBase.Relations
    End Get
  End Property

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Sub InitializeDerivedDataSet()
    Me.BeginInit()
    Me.InitClass()
    Me.EndInit()
  End Sub

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Public Overrides Function Clone() As System.Data.DataSet
    Dim cln As ScheduleDataset = CType(MyBase.Clone, ScheduleDataset)
    cln.InitVars()
    cln.SchemaSerializationMode = Me.SchemaSerializationMode
    Return cln
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Function ShouldSerializeTables() As Boolean
    Return False
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Function ShouldSerializeRelations() As Boolean
    Return False
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
    If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
      Me.Reset()
      Dim ds As System.Data.DataSet = New System.Data.DataSet
      ds.ReadXml(reader)
      If (Not (ds.Tables("ROOM")) Is Nothing) Then
        MyBase.Tables.Add(New ROOMDataTable(ds.Tables("ROOM")))
      End If
      If (Not (ds.Tables("APPOINTMENT")) Is Nothing) Then
        MyBase.Tables.Add(New APPOINTMENTDataTable(ds.Tables("APPOINTMENT")))
      End If
      If (Not (ds.Tables("APPOINTMENT_CATEGORY")) Is Nothing) Then
        MyBase.Tables.Add(New APPOINTMENT_CATEGORYDataTable(ds.Tables("APPOINTMENT_CATEGORY")))
      End If
      If (Not (ds.Tables("APPOINTMENT_PROVIDER")) Is Nothing) Then
        MyBase.Tables.Add(New APPOINTMENT_PROVIDERDataTable(ds.Tables("APPOINTMENT_PROVIDER")))
      End If
      If (Not (ds.Tables("CATEGORY")) Is Nothing) Then
        MyBase.Tables.Add(New CATEGORYDataTable(ds.Tables("CATEGORY")))
      End If
      If (Not (ds.Tables("PROVIDER")) Is Nothing) Then
        MyBase.Tables.Add(New PROVIDERDataTable(ds.Tables("PROVIDER")))
      End If
      Me.DataSetName = ds.DataSetName
      Me.Prefix = ds.Prefix
      Me.Namespace = ds.Namespace
      Me.Locale = ds.Locale
      Me.CaseSensitive = ds.CaseSensitive
      Me.EnforceConstraints = ds.EnforceConstraints
      Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
      Me.InitVars()
    Else
      Me.ReadXml(reader)
      Me.InitVars()
    End If
  End Sub

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
    Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
    Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
    stream.Position = 0
    Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Friend Overloads Sub InitVars()
    Me.InitVars(True)
  End Sub

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Friend Overloads Sub InitVars(ByVal initTable As Boolean)
    Me.tableROOM = CType(MyBase.Tables("ROOM"), ROOMDataTable)
    If (initTable = True) Then
      If (Not (Me.tableROOM) Is Nothing) Then
        Me.tableROOM.InitVars()
      End If
    End If
    Me.tableAPPOINTMENT = CType(MyBase.Tables("APPOINTMENT"), APPOINTMENTDataTable)
    If (initTable = True) Then
      If (Not (Me.tableAPPOINTMENT) Is Nothing) Then
        Me.tableAPPOINTMENT.InitVars()
      End If
    End If
    Me.tableAPPOINTMENT_CATEGORY = CType(MyBase.Tables("APPOINTMENT_CATEGORY"), APPOINTMENT_CATEGORYDataTable)
    If (initTable = True) Then
      If (Not (Me.tableAPPOINTMENT_CATEGORY) Is Nothing) Then
        Me.tableAPPOINTMENT_CATEGORY.InitVars()
      End If
    End If
    Me.tableAPPOINTMENT_PROVIDER = CType(MyBase.Tables("APPOINTMENT_PROVIDER"), APPOINTMENT_PROVIDERDataTable)
    If (initTable = True) Then
      If (Not (Me.tableAPPOINTMENT_PROVIDER) Is Nothing) Then
        Me.tableAPPOINTMENT_PROVIDER.InitVars()
      End If
    End If
    Me.tableCATEGORY = CType(MyBase.Tables("CATEGORY"), CATEGORYDataTable)
    If (initTable = True) Then
      If (Not (Me.tableCATEGORY) Is Nothing) Then
        Me.tableCATEGORY.InitVars()
      End If
    End If
    Me.tablePROVIDER = CType(MyBase.Tables("PROVIDER"), PROVIDERDataTable)
    If (initTable = True) Then
      If (Not (Me.tablePROVIDER) Is Nothing) Then
        Me.tablePROVIDER.InitVars()
      End If
    End If
    Me.relationFK_ROOM_APPOINTMENT = Me.Relations("FK_ROOM_APPOINTMENT")
    Me.relationFK_CATEGORY_APPOINTMENT_CATEGORY = Me.Relations("FK_CATEGORY_APPOINTMENT_CATEGORY")
    Me.relationFK_APPOINTMENT_APPOINTMENT_CATEGORY = Me.Relations("FK_APPOINTMENT_APPOINTMENT_CATEGORY")
    Me.relationFK_PROVIDER_APPOINTMENT_PROVIDER = Me.Relations("FK_PROVIDER_APPOINTMENT_PROVIDER")
    Me.relationFK_APPOINTMENT_APPOINTMENT_PROVIDER = Me.Relations("FK_APPOINTMENT_APPOINTMENT_PROVIDER")
  End Sub

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Sub InitClass()
    Me.DataSetName = "ScheduleDataset"
    Me.Prefix = ""
    Me.Namespace = "http://tempuri.org/ScheduleDataset.xsd"
    Me.EnforceConstraints = True
    Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    Me.tableROOM = New ROOMDataTable
    MyBase.Tables.Add(Me.tableROOM)
    Me.tableAPPOINTMENT = New APPOINTMENTDataTable
    MyBase.Tables.Add(Me.tableAPPOINTMENT)
    Me.tableAPPOINTMENT_CATEGORY = New APPOINTMENT_CATEGORYDataTable
    MyBase.Tables.Add(Me.tableAPPOINTMENT_CATEGORY)
    Me.tableAPPOINTMENT_PROVIDER = New APPOINTMENT_PROVIDERDataTable
    MyBase.Tables.Add(Me.tableAPPOINTMENT_PROVIDER)
    Me.tableCATEGORY = New CATEGORYDataTable
    MyBase.Tables.Add(Me.tableCATEGORY)
    Me.tablePROVIDER = New PROVIDERDataTable
    MyBase.Tables.Add(Me.tablePROVIDER)
    Dim fkc As System.Data.ForeignKeyConstraint
    fkc = New System.Data.ForeignKeyConstraint("FK_ROOM_APPOINTMENT", New System.Data.DataColumn() {Me.tableROOM.room_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT.room_guidColumn})
    Me.tableAPPOINTMENT.Constraints.Add(fkc)
    fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
    fkc.DeleteRule = System.Data.Rule.Cascade
    fkc.UpdateRule = System.Data.Rule.Cascade
    fkc = New System.Data.ForeignKeyConstraint("FK_CATEGORY_APPOINTMENT_CATEGORY", New System.Data.DataColumn() {Me.tableCATEGORY.category_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT_CATEGORY.category_guidColumn})
    Me.tableAPPOINTMENT_CATEGORY.Constraints.Add(fkc)
    fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
    fkc.DeleteRule = System.Data.Rule.Cascade
    fkc.UpdateRule = System.Data.Rule.Cascade
    fkc = New System.Data.ForeignKeyConstraint("FK_APPOINTMENT_APPOINTMENT_CATEGORY", New System.Data.DataColumn() {Me.tableAPPOINTMENT.appointment_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT_CATEGORY.appointment_guidColumn})
    Me.tableAPPOINTMENT_CATEGORY.Constraints.Add(fkc)
    fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
    fkc.DeleteRule = System.Data.Rule.Cascade
    fkc.UpdateRule = System.Data.Rule.Cascade
    fkc = New System.Data.ForeignKeyConstraint("FK_PROVIDER_APPOINTMENT_PROVIDER", New System.Data.DataColumn() {Me.tablePROVIDER.provider_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT_PROVIDER.provider_guidColumn})
    Me.tableAPPOINTMENT_PROVIDER.Constraints.Add(fkc)
    fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
    fkc.DeleteRule = System.Data.Rule.Cascade
    fkc.UpdateRule = System.Data.Rule.Cascade
    fkc = New System.Data.ForeignKeyConstraint("FK_APPOINTMENT_APPOINTMENT_PROVIDER", New System.Data.DataColumn() {Me.tableAPPOINTMENT.appointment_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT_PROVIDER.appointment_guidColumn})
    Me.tableAPPOINTMENT_PROVIDER.Constraints.Add(fkc)
    fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
    fkc.DeleteRule = System.Data.Rule.Cascade
    fkc.UpdateRule = System.Data.Rule.Cascade
    Me.relationFK_ROOM_APPOINTMENT = New System.Data.DataRelation("FK_ROOM_APPOINTMENT", New System.Data.DataColumn() {Me.tableROOM.room_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT.room_guidColumn}, False)
    Me.Relations.Add(Me.relationFK_ROOM_APPOINTMENT)
    Me.relationFK_CATEGORY_APPOINTMENT_CATEGORY = New System.Data.DataRelation("FK_CATEGORY_APPOINTMENT_CATEGORY", New System.Data.DataColumn() {Me.tableCATEGORY.category_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT_CATEGORY.category_guidColumn}, False)
    Me.Relations.Add(Me.relationFK_CATEGORY_APPOINTMENT_CATEGORY)
    Me.relationFK_APPOINTMENT_APPOINTMENT_CATEGORY = New System.Data.DataRelation("FK_APPOINTMENT_APPOINTMENT_CATEGORY", New System.Data.DataColumn() {Me.tableAPPOINTMENT.appointment_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT_CATEGORY.appointment_guidColumn}, False)
    Me.Relations.Add(Me.relationFK_APPOINTMENT_APPOINTMENT_CATEGORY)
    Me.relationFK_PROVIDER_APPOINTMENT_PROVIDER = New System.Data.DataRelation("FK_PROVIDER_APPOINTMENT_PROVIDER", New System.Data.DataColumn() {Me.tablePROVIDER.provider_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT_PROVIDER.provider_guidColumn}, False)
    Me.Relations.Add(Me.relationFK_PROVIDER_APPOINTMENT_PROVIDER)
    Me.relationFK_APPOINTMENT_APPOINTMENT_PROVIDER = New System.Data.DataRelation("FK_APPOINTMENT_APPOINTMENT_PROVIDER", New System.Data.DataColumn() {Me.tableAPPOINTMENT.appointment_guidColumn}, New System.Data.DataColumn() {Me.tableAPPOINTMENT_PROVIDER.appointment_guidColumn}, False)
    Me.Relations.Add(Me.relationFK_APPOINTMENT_APPOINTMENT_PROVIDER)
  End Sub

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeROOM() As Boolean
    Return False
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeAPPOINTMENT() As Boolean
    Return False
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeAPPOINTMENT_CATEGORY() As Boolean
    Return False
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeAPPOINTMENT_PROVIDER() As Boolean
    Return False
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeCATEGORY() As Boolean
    Return False
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializePROVIDER() As Boolean
    Return False
  End Function

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
    If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
      Me.InitVars()
    End If
  End Sub

  <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
    Dim ds As ScheduleDataset = New ScheduleDataset
    Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
    Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
    xs.Add(ds.GetSchemaSerializable)
    Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
    any.Namespace = ds.Namespace
    sequence.Items.Add(any)
    type.Particle = sequence
    Return type
  End Function

  Public Delegate Sub ROOMRowChangeEventHandler(ByVal sender As Object, ByVal e As ROOMRowChangeEvent)

  Public Delegate Sub APPOINTMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As APPOINTMENTRowChangeEvent)

  Public Delegate Sub APPOINTMENT_CATEGORYRowChangeEventHandler(ByVal sender As Object, ByVal e As APPOINTMENT_CATEGORYRowChangeEvent)

  Public Delegate Sub APPOINTMENT_PROVIDERRowChangeEventHandler(ByVal sender As Object, ByVal e As APPOINTMENT_PROVIDERRowChangeEvent)

  Public Delegate Sub CATEGORYRowChangeEventHandler(ByVal sender As Object, ByVal e As CATEGORYRowChangeEvent)

  Public Delegate Sub PROVIDERRowChangeEventHandler(ByVal sender As Object, ByVal e As PROVIDERRowChangeEvent)

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
   System.Serializable(), _
   System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Public Class ROOMDataTable
    Inherits System.Data.DataTable
    Implements System.Collections.IEnumerable

    Private columnroom_guid As System.Data.DataColumn

    Private columnname As System.Data.DataColumn

    Private columnnotes As System.Data.DataColumn

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "ROOM"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal table As System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property room_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnroom_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property nameColumn() As System.Data.DataColumn
      Get
        Return Me.columnname
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property notesColumn() As System.Data.DataColumn
      Get
        Return Me.columnnotes
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As ROOMRow
      Get
        Return CType(Me.Rows(index), ROOMRow)
      End Get
    End Property

    Public Event ROOMRowChanging As ROOMRowChangeEventHandler

    Public Event ROOMRowChanged As ROOMRowChangeEventHandler

    Public Event ROOMRowDeleting As ROOMRowChangeEventHandler

    Public Event ROOMRowDeleted As ROOMRowChangeEventHandler

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub AddROOMRow(ByVal row As ROOMRow)
      Me.Rows.Add(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Function AddROOMRow(ByVal room_guid As String, ByVal name As String, ByVal notes As String) As ROOMRow
      Dim rowROOMRow As ROOMRow = CType(Me.NewRow, ROOMRow)
      rowROOMRow.ItemArray = New Object() {room_guid, name, notes}
      Me.Rows.Add(rowROOMRow)
      Return rowROOMRow
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function FindByroom_guid(ByVal room_guid As String) As ROOMRow
      Return CType(Me.Rows.Find(New Object() {room_guid}), ROOMRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
      Return Me.Rows.GetEnumerator
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataTable
      Dim cln As ROOMDataTable = CType(MyBase.Clone, ROOMDataTable)
      cln.InitVars()
      Return cln
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function CreateInstance() As System.Data.DataTable
      Return New ROOMDataTable
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub InitVars()
      Me.columnroom_guid = MyBase.Columns("room_guid")
      Me.columnname = MyBase.Columns("name")
      Me.columnnotes = MyBase.Columns("notes")
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
      Me.columnroom_guid = New System.Data.DataColumn("room_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnroom_guid)
      Me.columnname = New System.Data.DataColumn("name", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnname)
      Me.columnnotes = New System.Data.DataColumn("notes", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnnotes)
      Me.Constraints.Add(New System.Data.UniqueConstraint("PK_ROOM", New System.Data.DataColumn() {Me.columnroom_guid}, True))
      Me.columnroom_guid.AllowDBNull = False
      Me.columnroom_guid.Unique = True
      Me.columnname.AllowDBNull = False
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function NewROOMRow() As ROOMRow
      Return CType(Me.NewRow, ROOMRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
      Return New ROOMRow(builder)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetRowType() As System.Type
      Return GetType(ROOMRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.ROOMRowChangedEvent) Is Nothing) Then
        RaiseEvent ROOMRowChanged(Me, New ROOMRowChangeEvent(CType(e.Row, ROOMRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.ROOMRowChangingEvent) Is Nothing) Then
        RaiseEvent ROOMRowChanging(Me, New ROOMRowChangeEvent(CType(e.Row, ROOMRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.ROOMRowDeletedEvent) Is Nothing) Then
        RaiseEvent ROOMRowDeleted(Me, New ROOMRowChangeEvent(CType(e.Row, ROOMRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.ROOMRowDeletingEvent) Is Nothing) Then
        RaiseEvent ROOMRowDeleting(Me, New ROOMRowChangeEvent(CType(e.Row, ROOMRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub RemoveROOMRow(ByVal row As ROOMRow)
      Me.Rows.Remove(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
      Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
      Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
      Dim ds As ScheduleDataset = New ScheduleDataset
      xs.Add(ds.GetSchemaSerializable)
      Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "ROOMDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Return type
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
   System.Serializable(), _
   System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Public Class APPOINTMENTDataTable
    Inherits System.Data.DataTable
    Implements System.Collections.IEnumerable

    Private columnappointment_guid As System.Data.DataColumn

    Private columnstart_date As System.Data.DataColumn

    Private columnlength As System.Data.DataColumn

    Private columnsubject As System.Data.DataColumn

    Private columnnotes As System.Data.DataColumn

    Private columntooltiptext As System.Data.DataColumn

    Private columnvisible As System.Data.DataColumn

    Private columnblockout As System.Data.DataColumn

    Private columnisevent As System.Data.DataColumn

    Private columnisflagged As System.Data.DataColumn

    Private columnisreadonly As System.Data.DataColumn

    Private columnmaxlength As System.Data.DataColumn

    Private columnminlength As System.Data.DataColumn

    Private columnrecurrence_guid As System.Data.DataColumn

    Private columnrecurrence_stamp As System.Data.DataColumn

    Private columnpriority As System.Data.DataColumn

    Private columnappearance_guid As System.Data.DataColumn

    Private columnroom_guid As System.Data.DataColumn

    Private columnalarm_window_text As System.Data.DataColumn

    Private columnalarm_is_armed As System.Data.DataColumn

    Private columnalarm_reminder As System.Data.DataColumn

    Private columnalarm_allow_open As System.Data.DataColumn

    Private columnalarm_allow_snooze As System.Data.DataColumn

    Private columnalarm_application_name As System.Data.DataColumn

    Private columnalarm_application_args As System.Data.DataColumn

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "APPOINTMENT"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal table As System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property appointment_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnappointment_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property start_dateColumn() As System.Data.DataColumn
      Get
        Return Me.columnstart_date
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property lengthColumn() As System.Data.DataColumn
      Get
        Return Me.columnlength
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property subjectColumn() As System.Data.DataColumn
      Get
        Return Me.columnsubject
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property notesColumn() As System.Data.DataColumn
      Get
        Return Me.columnnotes
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property tooltiptextColumn() As System.Data.DataColumn
      Get
        Return Me.columntooltiptext
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property visibleColumn() As System.Data.DataColumn
      Get
        Return Me.columnvisible
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property blockoutColumn() As System.Data.DataColumn
      Get
        Return Me.columnblockout
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property iseventColumn() As System.Data.DataColumn
      Get
        Return Me.columnisevent
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property isflaggedColumn() As System.Data.DataColumn
      Get
        Return Me.columnisflagged
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property isreadonlyColumn() As System.Data.DataColumn
      Get
        Return Me.columnisreadonly
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property maxlengthColumn() As System.Data.DataColumn
      Get
        Return Me.columnmaxlength
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property minlengthColumn() As System.Data.DataColumn
      Get
        Return Me.columnminlength
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property recurrence_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnrecurrence_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property recurrence_stampColumn() As System.Data.DataColumn
      Get
        Return Me.columnrecurrence_stamp
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property priorityColumn() As System.Data.DataColumn
      Get
        Return Me.columnpriority
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property appearance_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnappearance_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property room_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnroom_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property alarm_window_textColumn() As System.Data.DataColumn
      Get
        Return Me.columnalarm_window_text
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property alarm_is_armedColumn() As System.Data.DataColumn
      Get
        Return Me.columnalarm_is_armed
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property alarm_reminderColumn() As System.Data.DataColumn
      Get
        Return Me.columnalarm_reminder
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property alarm_allow_openColumn() As System.Data.DataColumn
      Get
        Return Me.columnalarm_allow_open
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property alarm_allow_snoozeColumn() As System.Data.DataColumn
      Get
        Return Me.columnalarm_allow_snooze
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property alarm_application_nameColumn() As System.Data.DataColumn
      Get
        Return Me.columnalarm_application_name
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property alarm_application_argsColumn() As System.Data.DataColumn
      Get
        Return Me.columnalarm_application_args
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As APPOINTMENTRow
      Get
        Return CType(Me.Rows(index), APPOINTMENTRow)
      End Get
    End Property

    Public Event APPOINTMENTRowChanging As APPOINTMENTRowChangeEventHandler

    Public Event APPOINTMENTRowChanged As APPOINTMENTRowChangeEventHandler

    Public Event APPOINTMENTRowDeleting As APPOINTMENTRowChangeEventHandler

    Public Event APPOINTMENTRowDeleted As APPOINTMENTRowChangeEventHandler

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub AddAPPOINTMENTRow(ByVal row As APPOINTMENTRow)
      Me.Rows.Add(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Function AddAPPOINTMENTRow( _
                ByVal appointment_guid As String, _
                ByVal start_date As Date, _
                ByVal length As Integer, _
                ByVal subject As String, _
                ByVal notes As String, _
                ByVal tooltiptext As String, _
                ByVal visible As Boolean, _
                ByVal blockout As Boolean, _
                ByVal isevent As Boolean, _
                ByVal isflagged As Boolean, _
                ByVal isreadonly As Boolean, _
                ByVal maxlength As Integer, _
                ByVal minlength As Integer, _
                ByVal recurrence_guid As String, _
                ByVal recurrence_stamp As String, _
                ByVal priority As Integer, _
                ByVal appearance_guid As String, _
                ByVal parentROOMRowByFK_ROOM_APPOINTMENT As ROOMRow, _
                ByVal alarm_window_text As String, _
                ByVal alarm_is_armed As Boolean, _
                ByVal alarm_reminder As Integer, _
                ByVal alarm_allow_open As Boolean, _
                ByVal alarm_allow_snooze As Boolean, _
                ByVal alarm_application_name As String, _
                ByVal alarm_application_args As String) As APPOINTMENTRow
      Dim rowAPPOINTMENTRow As APPOINTMENTRow = CType(Me.NewRow, APPOINTMENTRow)
      rowAPPOINTMENTRow.ItemArray = New Object() {appointment_guid, start_date, length, subject, notes, tooltiptext, visible, blockout, isevent, isflagged, isreadonly, maxlength, minlength, recurrence_guid, recurrence_stamp, priority, appearance_guid, parentROOMRowByFK_ROOM_APPOINTMENT(0), alarm_window_text, alarm_is_armed, alarm_reminder, alarm_allow_open, alarm_allow_snooze, alarm_application_name, alarm_application_args}
      Me.Rows.Add(rowAPPOINTMENTRow)
      Return rowAPPOINTMENTRow
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function FindByappointment_guid(ByVal appointment_guid As String) As APPOINTMENTRow
      Return CType(Me.Rows.Find(New Object() {appointment_guid}), APPOINTMENTRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
      Return Me.Rows.GetEnumerator
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataTable
      Dim cln As APPOINTMENTDataTable = CType(MyBase.Clone, APPOINTMENTDataTable)
      cln.InitVars()
      Return cln
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function CreateInstance() As System.Data.DataTable
      Return New APPOINTMENTDataTable
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub InitVars()
      Me.columnappointment_guid = MyBase.Columns("appointment_guid")
      Me.columnstart_date = MyBase.Columns("start_date")
      Me.columnlength = MyBase.Columns("length")
      Me.columnsubject = MyBase.Columns("subject")
      Me.columnnotes = MyBase.Columns("notes")
      Me.columntooltiptext = MyBase.Columns("tooltiptext")
      Me.columnvisible = MyBase.Columns("visible")
      Me.columnblockout = MyBase.Columns("blockout")
      Me.columnisevent = MyBase.Columns("isevent")
      Me.columnisflagged = MyBase.Columns("isflagged")
      Me.columnisreadonly = MyBase.Columns("isreadonly")
      Me.columnmaxlength = MyBase.Columns("maxlength")
      Me.columnminlength = MyBase.Columns("minlength")
      Me.columnrecurrence_guid = MyBase.Columns("recurrence_guid")
      Me.columnrecurrence_stamp = MyBase.Columns("recurrence_stamp")
      Me.columnpriority = MyBase.Columns("priority")
      Me.columnappearance_guid = MyBase.Columns("appearance_guid")
      Me.columnroom_guid = MyBase.Columns("room_guid")
      Me.columnalarm_window_text = MyBase.Columns("alarm_window_text")
      Me.columnalarm_is_armed = MyBase.Columns("alarm_is_armed")
      Me.columnalarm_reminder = MyBase.Columns("alarm_reminder")
      Me.columnalarm_allow_open = MyBase.Columns("alarm_allow_open")
      Me.columnalarm_allow_snooze = MyBase.Columns("alarm_allow_snooze")
      Me.columnalarm_application_name = MyBase.Columns("alarm_application_name")
      Me.columnalarm_application_args = MyBase.Columns("alarm_application_args")
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
      Me.columnappointment_guid = New System.Data.DataColumn("appointment_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnappointment_guid)
      Me.columnstart_date = New System.Data.DataColumn("start_date", GetType(Date), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnstart_date)
      Me.columnlength = New System.Data.DataColumn("length", GetType(Integer), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnlength)
      Me.columnsubject = New System.Data.DataColumn("subject", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnsubject)
      Me.columnnotes = New System.Data.DataColumn("notes", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnnotes)
      Me.columntooltiptext = New System.Data.DataColumn("tooltiptext", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columntooltiptext)
      Me.columnvisible = New System.Data.DataColumn("visible", GetType(Boolean), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnvisible)
      Me.columnblockout = New System.Data.DataColumn("blockout", GetType(Boolean), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnblockout)
      Me.columnisevent = New System.Data.DataColumn("isevent", GetType(Boolean), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnisevent)
      Me.columnisflagged = New System.Data.DataColumn("isflagged", GetType(Boolean), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnisflagged)
      Me.columnisreadonly = New System.Data.DataColumn("isreadonly", GetType(Boolean), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnisreadonly)
      Me.columnmaxlength = New System.Data.DataColumn("maxlength", GetType(Integer), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnmaxlength)
      Me.columnminlength = New System.Data.DataColumn("minlength", GetType(Integer), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnminlength)
      Me.columnrecurrence_guid = New System.Data.DataColumn("recurrence_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnrecurrence_guid)
      Me.columnrecurrence_stamp = New System.Data.DataColumn("recurrence_stamp", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnrecurrence_stamp)
      Me.columnpriority = New System.Data.DataColumn("priority", GetType(Integer), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnpriority)
      Me.columnappearance_guid = New System.Data.DataColumn("appearance_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnappearance_guid)
      Me.columnroom_guid = New System.Data.DataColumn("room_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnroom_guid)
      Me.columnalarm_window_text = New System.Data.DataColumn("alarm_window_text", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnalarm_window_text)
      Me.columnalarm_is_armed = New System.Data.DataColumn("alarm_is_armed", GetType(Boolean), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnalarm_is_armed)
      Me.columnalarm_reminder = New System.Data.DataColumn("alarm_reminder", GetType(Integer), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnalarm_reminder)
      Me.columnalarm_allow_open = New System.Data.DataColumn("alarm_allow_open", GetType(Boolean), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnalarm_allow_open)
      Me.columnalarm_allow_snooze = New System.Data.DataColumn("alarm_allow_snooze", GetType(Boolean), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnalarm_allow_snooze)
      Me.columnalarm_application_name = New System.Data.DataColumn("alarm_application_name", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnalarm_application_name)
      Me.columnalarm_application_args = New System.Data.DataColumn("alarm_application_args", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnalarm_application_args)
      Me.Constraints.Add(New System.Data.UniqueConstraint("PK_APPOINTMENT", New System.Data.DataColumn() {Me.columnappointment_guid}, True))
      Me.columnappointment_guid.AllowDBNull = False
      Me.columnappointment_guid.Unique = True
      Me.columnstart_date.AllowDBNull = False
      Me.columnlength.AllowDBNull = False
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function NewAPPOINTMENTRow() As APPOINTMENTRow
      Return CType(Me.NewRow, APPOINTMENTRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
      Return New APPOINTMENTRow(builder)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetRowType() As System.Type
      Return GetType(APPOINTMENTRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.APPOINTMENTRowChangedEvent) Is Nothing) Then
        RaiseEvent APPOINTMENTRowChanged(Me, New APPOINTMENTRowChangeEvent(CType(e.Row, APPOINTMENTRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.APPOINTMENTRowChangingEvent) Is Nothing) Then
        RaiseEvent APPOINTMENTRowChanging(Me, New APPOINTMENTRowChangeEvent(CType(e.Row, APPOINTMENTRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.APPOINTMENTRowDeletedEvent) Is Nothing) Then
        RaiseEvent APPOINTMENTRowDeleted(Me, New APPOINTMENTRowChangeEvent(CType(e.Row, APPOINTMENTRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.APPOINTMENTRowDeletingEvent) Is Nothing) Then
        RaiseEvent APPOINTMENTRowDeleting(Me, New APPOINTMENTRowChangeEvent(CType(e.Row, APPOINTMENTRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub RemoveAPPOINTMENTRow(ByVal row As APPOINTMENTRow)
      Me.Rows.Remove(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
      Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
      Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
      Dim ds As ScheduleDataset = New ScheduleDataset
      xs.Add(ds.GetSchemaSerializable)
      Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "APPOINTMENTDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Return type
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
   System.Serializable(), _
   System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Public Class APPOINTMENT_CATEGORYDataTable
    Inherits System.Data.DataTable
    Implements System.Collections.IEnumerable

    Private columnappointment_guid As System.Data.DataColumn

    Private columncategory_guid As System.Data.DataColumn

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "APPOINTMENT_CATEGORY"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal table As System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property appointment_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnappointment_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property category_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columncategory_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As APPOINTMENT_CATEGORYRow
      Get
        Return CType(Me.Rows(index), APPOINTMENT_CATEGORYRow)
      End Get
    End Property

    Public Event APPOINTMENT_CATEGORYRowChanging As APPOINTMENT_CATEGORYRowChangeEventHandler

    Public Event APPOINTMENT_CATEGORYRowChanged As APPOINTMENT_CATEGORYRowChangeEventHandler

    Public Event APPOINTMENT_CATEGORYRowDeleting As APPOINTMENT_CATEGORYRowChangeEventHandler

    Public Event APPOINTMENT_CATEGORYRowDeleted As APPOINTMENT_CATEGORYRowChangeEventHandler

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub AddAPPOINTMENT_CATEGORYRow(ByVal row As APPOINTMENT_CATEGORYRow)
      Me.Rows.Add(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Function AddAPPOINTMENT_CATEGORYRow(ByVal parentAPPOINTMENTRowByFK_APPOINTMENT_APPOINTMENT_CATEGORY As APPOINTMENTRow, ByVal parentCATEGORYRowByFK_CATEGORY_APPOINTMENT_CATEGORY As CATEGORYRow) As APPOINTMENT_CATEGORYRow
      Dim rowAPPOINTMENT_CATEGORYRow As APPOINTMENT_CATEGORYRow = CType(Me.NewRow, APPOINTMENT_CATEGORYRow)
      rowAPPOINTMENT_CATEGORYRow.ItemArray = New Object() {parentAPPOINTMENTRowByFK_APPOINTMENT_APPOINTMENT_CATEGORY(0), parentCATEGORYRowByFK_CATEGORY_APPOINTMENT_CATEGORY(1)}
      Me.Rows.Add(rowAPPOINTMENT_CATEGORYRow)
      Return rowAPPOINTMENT_CATEGORYRow
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function FindByappointment_guidcategory_guid(ByVal appointment_guid As String, ByVal category_guid As String) As APPOINTMENT_CATEGORYRow
      Return CType(Me.Rows.Find(New Object() {appointment_guid, category_guid}), APPOINTMENT_CATEGORYRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
      Return Me.Rows.GetEnumerator
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataTable
      Dim cln As APPOINTMENT_CATEGORYDataTable = CType(MyBase.Clone, APPOINTMENT_CATEGORYDataTable)
      cln.InitVars()
      Return cln
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function CreateInstance() As System.Data.DataTable
      Return New APPOINTMENT_CATEGORYDataTable
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub InitVars()
      Me.columnappointment_guid = MyBase.Columns("appointment_guid")
      Me.columncategory_guid = MyBase.Columns("category_guid")
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
      Me.columnappointment_guid = New System.Data.DataColumn("appointment_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnappointment_guid)
      Me.columncategory_guid = New System.Data.DataColumn("category_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columncategory_guid)
      Me.Constraints.Add(New System.Data.UniqueConstraint("PK_APPOINTMENT_CATEGORY", New System.Data.DataColumn() {Me.columnappointment_guid, Me.columncategory_guid}, True))
      Me.columnappointment_guid.AllowDBNull = False
      Me.columncategory_guid.AllowDBNull = False
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function NewAPPOINTMENT_CATEGORYRow() As APPOINTMENT_CATEGORYRow
      Return CType(Me.NewRow, APPOINTMENT_CATEGORYRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
      Return New APPOINTMENT_CATEGORYRow(builder)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetRowType() As System.Type
      Return GetType(APPOINTMENT_CATEGORYRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.APPOINTMENT_CATEGORYRowChangedEvent) Is Nothing) Then
        RaiseEvent APPOINTMENT_CATEGORYRowChanged(Me, New APPOINTMENT_CATEGORYRowChangeEvent(CType(e.Row, APPOINTMENT_CATEGORYRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.APPOINTMENT_CATEGORYRowChangingEvent) Is Nothing) Then
        RaiseEvent APPOINTMENT_CATEGORYRowChanging(Me, New APPOINTMENT_CATEGORYRowChangeEvent(CType(e.Row, APPOINTMENT_CATEGORYRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.APPOINTMENT_CATEGORYRowDeletedEvent) Is Nothing) Then
        RaiseEvent APPOINTMENT_CATEGORYRowDeleted(Me, New APPOINTMENT_CATEGORYRowChangeEvent(CType(e.Row, APPOINTMENT_CATEGORYRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.APPOINTMENT_CATEGORYRowDeletingEvent) Is Nothing) Then
        RaiseEvent APPOINTMENT_CATEGORYRowDeleting(Me, New APPOINTMENT_CATEGORYRowChangeEvent(CType(e.Row, APPOINTMENT_CATEGORYRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub RemoveAPPOINTMENT_CATEGORYRow(ByVal row As APPOINTMENT_CATEGORYRow)
      Me.Rows.Remove(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
      Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
      Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
      Dim ds As ScheduleDataset = New ScheduleDataset
      xs.Add(ds.GetSchemaSerializable)
      Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "APPOINTMENT_CATEGORYDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Return type
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
   System.Serializable(), _
   System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Public Class APPOINTMENT_PROVIDERDataTable
    Inherits System.Data.DataTable
    Implements System.Collections.IEnumerable

    Private columnappointment_guid As System.Data.DataColumn

    Private columnprovider_guid As System.Data.DataColumn

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "APPOINTMENT_PROVIDER"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal table As System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property appointment_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnappointment_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property provider_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnprovider_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As APPOINTMENT_PROVIDERRow
      Get
        Return CType(Me.Rows(index), APPOINTMENT_PROVIDERRow)
      End Get
    End Property

    Public Event APPOINTMENT_PROVIDERRowChanging As APPOINTMENT_PROVIDERRowChangeEventHandler

    Public Event APPOINTMENT_PROVIDERRowChanged As APPOINTMENT_PROVIDERRowChangeEventHandler

    Public Event APPOINTMENT_PROVIDERRowDeleting As APPOINTMENT_PROVIDERRowChangeEventHandler

    Public Event APPOINTMENT_PROVIDERRowDeleted As APPOINTMENT_PROVIDERRowChangeEventHandler

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub AddAPPOINTMENT_PROVIDERRow(ByVal row As APPOINTMENT_PROVIDERRow)
      Me.Rows.Add(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Function AddAPPOINTMENT_PROVIDERRow(ByVal parentAPPOINTMENTRowByFK_APPOINTMENT_APPOINTMENT_PROVIDER As APPOINTMENTRow, ByVal parentPROVIDERRowByFK_PROVIDER_APPOINTMENT_PROVIDER As PROVIDERRow) As APPOINTMENT_PROVIDERRow
      Dim rowAPPOINTMENT_PROVIDERRow As APPOINTMENT_PROVIDERRow = CType(Me.NewRow, APPOINTMENT_PROVIDERRow)
      rowAPPOINTMENT_PROVIDERRow.ItemArray = New Object() {parentAPPOINTMENTRowByFK_APPOINTMENT_APPOINTMENT_PROVIDER(0), parentPROVIDERRowByFK_PROVIDER_APPOINTMENT_PROVIDER(1)}
      Me.Rows.Add(rowAPPOINTMENT_PROVIDERRow)
      Return rowAPPOINTMENT_PROVIDERRow
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function FindByappointment_guidprovider_guid(ByVal appointment_guid As String, ByVal provider_guid As String) As APPOINTMENT_PROVIDERRow
      Return CType(Me.Rows.Find(New Object() {appointment_guid, provider_guid}), APPOINTMENT_PROVIDERRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
      Return Me.Rows.GetEnumerator
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataTable
      Dim cln As APPOINTMENT_PROVIDERDataTable = CType(MyBase.Clone, APPOINTMENT_PROVIDERDataTable)
      cln.InitVars()
      Return cln
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function CreateInstance() As System.Data.DataTable
      Return New APPOINTMENT_PROVIDERDataTable
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub InitVars()
      Me.columnappointment_guid = MyBase.Columns("appointment_guid")
      Me.columnprovider_guid = MyBase.Columns("provider_guid")
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
      Me.columnappointment_guid = New System.Data.DataColumn("appointment_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnappointment_guid)
      Me.columnprovider_guid = New System.Data.DataColumn("provider_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnprovider_guid)
      Me.Constraints.Add(New System.Data.UniqueConstraint("PK_APPOINTMENT_PROVIDER", New System.Data.DataColumn() {Me.columnappointment_guid, Me.columnprovider_guid}, True))
      Me.columnappointment_guid.AllowDBNull = False
      Me.columnprovider_guid.AllowDBNull = False
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function NewAPPOINTMENT_PROVIDERRow() As APPOINTMENT_PROVIDERRow
      Return CType(Me.NewRow, APPOINTMENT_PROVIDERRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
      Return New APPOINTMENT_PROVIDERRow(builder)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetRowType() As System.Type
      Return GetType(APPOINTMENT_PROVIDERRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.APPOINTMENT_PROVIDERRowChangedEvent) Is Nothing) Then
        RaiseEvent APPOINTMENT_PROVIDERRowChanged(Me, New APPOINTMENT_PROVIDERRowChangeEvent(CType(e.Row, APPOINTMENT_PROVIDERRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.APPOINTMENT_PROVIDERRowChangingEvent) Is Nothing) Then
        RaiseEvent APPOINTMENT_PROVIDERRowChanging(Me, New APPOINTMENT_PROVIDERRowChangeEvent(CType(e.Row, APPOINTMENT_PROVIDERRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.APPOINTMENT_PROVIDERRowDeletedEvent) Is Nothing) Then
        RaiseEvent APPOINTMENT_PROVIDERRowDeleted(Me, New APPOINTMENT_PROVIDERRowChangeEvent(CType(e.Row, APPOINTMENT_PROVIDERRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.APPOINTMENT_PROVIDERRowDeletingEvent) Is Nothing) Then
        RaiseEvent APPOINTMENT_PROVIDERRowDeleting(Me, New APPOINTMENT_PROVIDERRowChangeEvent(CType(e.Row, APPOINTMENT_PROVIDERRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub RemoveAPPOINTMENT_PROVIDERRow(ByVal row As APPOINTMENT_PROVIDERRow)
      Me.Rows.Remove(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
      Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
      Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
      Dim ds As ScheduleDataset = New ScheduleDataset
      xs.Add(ds.GetSchemaSerializable)
      Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "APPOINTMENT_PROVIDERDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Return type
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
   System.Serializable(), _
   System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Public Class CATEGORYDataTable
    Inherits System.Data.DataTable
    Implements System.Collections.IEnumerable

    Private columnaccount_guid As System.Data.DataColumn

    Private columncategory_guid As System.Data.DataColumn

    Private columnname As System.Data.DataColumn

    Private columncolor As System.Data.DataColumn

    Private columnnotes As System.Data.DataColumn

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "CATEGORY"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal table As System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property account_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnaccount_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property category_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columncategory_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property nameColumn() As System.Data.DataColumn
      Get
        Return Me.columnname
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property colorColumn() As System.Data.DataColumn
      Get
        Return Me.columncolor
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property notesColumn() As System.Data.DataColumn
      Get
        Return Me.columnnotes
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As CATEGORYRow
      Get
        Return CType(Me.Rows(index), CATEGORYRow)
      End Get
    End Property

    Public Event CATEGORYRowChanging As CATEGORYRowChangeEventHandler

    Public Event CATEGORYRowChanged As CATEGORYRowChangeEventHandler

    Public Event CATEGORYRowDeleting As CATEGORYRowChangeEventHandler

    Public Event CATEGORYRowDeleted As CATEGORYRowChangeEventHandler

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub AddCATEGORYRow(ByVal row As CATEGORYRow)
      Me.Rows.Add(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Function AddCATEGORYRow(ByVal account_guid As String, ByVal category_guid As String, ByVal name As String, ByVal color As Integer, ByVal notes As String) As CATEGORYRow
      Dim rowCATEGORYRow As CATEGORYRow = CType(Me.NewRow, CATEGORYRow)
      rowCATEGORYRow.ItemArray = New Object() {account_guid, category_guid, name, color, notes}
      Me.Rows.Add(rowCATEGORYRow)
      Return rowCATEGORYRow
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function FindBycategory_guid(ByVal category_guid As String) As CATEGORYRow
      Return CType(Me.Rows.Find(New Object() {category_guid}), CATEGORYRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
      Return Me.Rows.GetEnumerator
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataTable
      Dim cln As CATEGORYDataTable = CType(MyBase.Clone, CATEGORYDataTable)
      cln.InitVars()
      Return cln
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function CreateInstance() As System.Data.DataTable
      Return New CATEGORYDataTable
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub InitVars()
      Me.columnaccount_guid = MyBase.Columns("account_guid")
      Me.columncategory_guid = MyBase.Columns("category_guid")
      Me.columnname = MyBase.Columns("name")
      Me.columncolor = MyBase.Columns("color")
      Me.columnnotes = MyBase.Columns("notes")
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
      Me.columnaccount_guid = New System.Data.DataColumn("account_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnaccount_guid)
      Me.columncategory_guid = New System.Data.DataColumn("category_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columncategory_guid)
      Me.columnname = New System.Data.DataColumn("name", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnname)
      Me.columncolor = New System.Data.DataColumn("color", GetType(Integer), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columncolor)
      Me.columnnotes = New System.Data.DataColumn("notes", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnnotes)
      Me.Constraints.Add(New System.Data.UniqueConstraint("PK_CATEGORY", New System.Data.DataColumn() {Me.columncategory_guid}, True))
      Me.columncategory_guid.AllowDBNull = False
      Me.columncategory_guid.Unique = True
      Me.columnname.AllowDBNull = False
      Me.columncolor.AllowDBNull = False
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function NewCATEGORYRow() As CATEGORYRow
      Return CType(Me.NewRow, CATEGORYRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
      Return New CATEGORYRow(builder)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetRowType() As System.Type
      Return GetType(CATEGORYRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.CATEGORYRowChangedEvent) Is Nothing) Then
        RaiseEvent CATEGORYRowChanged(Me, New CATEGORYRowChangeEvent(CType(e.Row, CATEGORYRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.CATEGORYRowChangingEvent) Is Nothing) Then
        RaiseEvent CATEGORYRowChanging(Me, New CATEGORYRowChangeEvent(CType(e.Row, CATEGORYRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.CATEGORYRowDeletedEvent) Is Nothing) Then
        RaiseEvent CATEGORYRowDeleted(Me, New CATEGORYRowChangeEvent(CType(e.Row, CATEGORYRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.CATEGORYRowDeletingEvent) Is Nothing) Then
        RaiseEvent CATEGORYRowDeleting(Me, New CATEGORYRowChangeEvent(CType(e.Row, CATEGORYRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub RemoveCATEGORYRow(ByVal row As CATEGORYRow)
      Me.Rows.Remove(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
      Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
      Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
      Dim ds As ScheduleDataset = New ScheduleDataset
      xs.Add(ds.GetSchemaSerializable)
      Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "CATEGORYDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Return type
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
   System.Serializable(), _
   System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Public Class PROVIDERDataTable
    Inherits System.Data.DataTable
    Implements System.Collections.IEnumerable

    Private columnaccount_guid As System.Data.DataColumn

    Private columnprovider_guid As System.Data.DataColumn

    Private columnname As System.Data.DataColumn

    Private columncolor As System.Data.DataColumn

    Private columnnotes As System.Data.DataColumn

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "PROVIDER"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal table As System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property account_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnaccount_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property provider_guidColumn() As System.Data.DataColumn
      Get
        Return Me.columnprovider_guid
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property nameColumn() As System.Data.DataColumn
      Get
        Return Me.columnname
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property colorColumn() As System.Data.DataColumn
      Get
        Return Me.columncolor
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property notesColumn() As System.Data.DataColumn
      Get
        Return Me.columnnotes
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As PROVIDERRow
      Get
        Return CType(Me.Rows(index), PROVIDERRow)
      End Get
    End Property

    Public Event PROVIDERRowChanging As PROVIDERRowChangeEventHandler

    Public Event PROVIDERRowChanged As PROVIDERRowChangeEventHandler

    Public Event PROVIDERRowDeleting As PROVIDERRowChangeEventHandler

    Public Event PROVIDERRowDeleted As PROVIDERRowChangeEventHandler

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub AddPROVIDERRow(ByVal row As PROVIDERRow)
      Me.Rows.Add(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Function AddPROVIDERRow(ByVal account_guid As String, ByVal provider_guid As String, ByVal name As String, ByVal color As Integer, ByVal notes As String) As PROVIDERRow
      Dim rowPROVIDERRow As PROVIDERRow = CType(Me.NewRow, PROVIDERRow)
      rowPROVIDERRow.ItemArray = New Object() {account_guid, provider_guid, name, color, notes}
      Me.Rows.Add(rowPROVIDERRow)
      Return rowPROVIDERRow
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function FindByprovider_guid(ByVal provider_guid As String) As PROVIDERRow
      Return CType(Me.Rows.Find(New Object() {provider_guid}), PROVIDERRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
      Return Me.Rows.GetEnumerator
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataTable
      Dim cln As PROVIDERDataTable = CType(MyBase.Clone, PROVIDERDataTable)
      cln.InitVars()
      Return cln
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function CreateInstance() As System.Data.DataTable
      Return New PROVIDERDataTable
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub InitVars()
      Me.columnaccount_guid = MyBase.Columns("account_guid")
      Me.columnprovider_guid = MyBase.Columns("provider_guid")
      Me.columnname = MyBase.Columns("name")
      Me.columncolor = MyBase.Columns("color")
      Me.columnnotes = MyBase.Columns("notes")
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
      Me.columnaccount_guid = New System.Data.DataColumn("account_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnaccount_guid)
      Me.columnprovider_guid = New System.Data.DataColumn("provider_guid", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnprovider_guid)
      Me.columnname = New System.Data.DataColumn("name", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnname)
      Me.columncolor = New System.Data.DataColumn("color", GetType(Integer), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columncolor)
      Me.columnnotes = New System.Data.DataColumn("notes", GetType(String), Nothing, System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnnotes)
      Me.Constraints.Add(New System.Data.UniqueConstraint("PK_PROVIDER", New System.Data.DataColumn() {Me.columnprovider_guid}, True))
      Me.columnprovider_guid.AllowDBNull = False
      Me.columnprovider_guid.Unique = True
      Me.columnname.AllowDBNull = False
      Me.columncolor.AllowDBNull = False
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function NewPROVIDERRow() As PROVIDERRow
      Return CType(Me.NewRow, PROVIDERRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
      Return New PROVIDERRow(builder)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetRowType() As System.Type
      Return GetType(PROVIDERRow)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.PROVIDERRowChangedEvent) Is Nothing) Then
        RaiseEvent PROVIDERRowChanged(Me, New PROVIDERRowChangeEvent(CType(e.Row, PROVIDERRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.PROVIDERRowChangingEvent) Is Nothing) Then
        RaiseEvent PROVIDERRowChanging(Me, New PROVIDERRowChangeEvent(CType(e.Row, PROVIDERRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.PROVIDERRowDeletedEvent) Is Nothing) Then
        RaiseEvent PROVIDERRowDeleted(Me, New PROVIDERRowChangeEvent(CType(e.Row, PROVIDERRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.PROVIDERRowDeletingEvent) Is Nothing) Then
        RaiseEvent PROVIDERRowDeleting(Me, New PROVIDERRowChangeEvent(CType(e.Row, PROVIDERRow), e.Action))
      End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub RemovePROVIDERRow(ByVal row As PROVIDERRow)
      Me.Rows.Remove(row)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
      Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
      Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
      Dim ds As ScheduleDataset = New ScheduleDataset
      xs.Add(ds.GetSchemaSerializable)
      Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "PROVIDERDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Return type
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class ROOMRow
    Inherits System.Data.DataRow

    Private tableROOM As ROOMDataTable

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableROOM = CType(Me.Table, ROOMDataTable)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property room_guid() As String
      Get
        Return CType(Me(Me.tableROOM.room_guidColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tableROOM.room_guidColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property name() As String
      Get
        Return CType(Me(Me.tableROOM.nameColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tableROOM.nameColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property notes() As String
      Get
        Try
          Return CType(Me(Me.tableROOM.notesColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'notes' in table 'ROOM' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableROOM.notesColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsnotesNull() As Boolean
      Return Me.IsNull(Me.tableROOM.notesColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetnotesNull()
      Me(Me.tableROOM.notesColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function GetAPPOINTMENTRows() As APPOINTMENTRow()
      Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ROOM_APPOINTMENT")), APPOINTMENTRow())
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class APPOINTMENTRow
    Inherits System.Data.DataRow

    Private tableAPPOINTMENT As APPOINTMENTDataTable

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableAPPOINTMENT = CType(Me.Table, APPOINTMENTDataTable)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property appointment_guid() As String
      Get
        Return CType(Me(Me.tableAPPOINTMENT.appointment_guidColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.appointment_guidColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property start_date() As Date
      Get
        Return CType(Me(Me.tableAPPOINTMENT.start_dateColumn), Date)
      End Get
      Set(ByVal value As Date)
        Me(Me.tableAPPOINTMENT.start_dateColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property length() As Integer
      Get
        Return CType(Me(Me.tableAPPOINTMENT.lengthColumn), Integer)
      End Get
      Set(ByVal value As Integer)
        Me(Me.tableAPPOINTMENT.lengthColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property subject() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.subjectColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'subject' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.subjectColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property notes() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.notesColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'notes' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.notesColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property tooltiptext() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.tooltiptextColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'tooltiptext' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.tooltiptextColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property visible() As Boolean
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.visibleColumn), Boolean)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'visible' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Boolean)
        Me(Me.tableAPPOINTMENT.visibleColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property blockout() As Boolean
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.blockoutColumn), Boolean)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'blockout' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Boolean)
        Me(Me.tableAPPOINTMENT.blockoutColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property isevent() As Boolean
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.iseventColumn), Boolean)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'isevent' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Boolean)
        Me(Me.tableAPPOINTMENT.iseventColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property isflagged() As Boolean
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.isflaggedColumn), Boolean)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'isflagged' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Boolean)
        Me(Me.tableAPPOINTMENT.isflaggedColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property isreadonly() As Boolean
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.isreadonlyColumn), Boolean)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'isreadonly' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Boolean)
        Me(Me.tableAPPOINTMENT.isreadonlyColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property maxlength() As Integer
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.maxlengthColumn), Integer)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'maxlength' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Integer)
        Me(Me.tableAPPOINTMENT.maxlengthColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property minlength() As Integer
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.minlengthColumn), Integer)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'minlength' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Integer)
        Me(Me.tableAPPOINTMENT.minlengthColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property recurrence_guid() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.recurrence_guidColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'recurrence_guid' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.recurrence_guidColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property recurrence_stamp() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.recurrence_stampColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'recurrence_stamp' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.recurrence_stampColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property priority() As Integer
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.priorityColumn), Integer)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'priority' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Integer)
        Me(Me.tableAPPOINTMENT.priorityColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property appearance_guid() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.appearance_guidColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'appearance_guid' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.appearance_guidColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property room_guid() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.room_guidColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'room_guid' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.room_guidColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property alarm_window_text() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.alarm_window_textColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'alarm_window_text' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.alarm_window_textColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property alarm_is_armed() As Boolean
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.alarm_is_armedColumn), Boolean)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'alarm_is_armed' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Boolean)
        Me(Me.tableAPPOINTMENT.alarm_is_armedColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property alarm_reminder() As Integer
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.alarm_reminderColumn), Integer)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'alarm_reminder' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Integer)
        Me(Me.tableAPPOINTMENT.alarm_reminderColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property alarm_allow_open() As Boolean
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.alarm_allow_openColumn), Boolean)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'alarm_allow_open' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Boolean)
        Me(Me.tableAPPOINTMENT.alarm_allow_openColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property alarm_allow_snooze() As Boolean
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.alarm_allow_snoozeColumn), Boolean)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'alarm_allow_snooze' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As Boolean)
        Me(Me.tableAPPOINTMENT.alarm_allow_snoozeColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property alarm_application_name() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.alarm_application_nameColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'alarm_application_name' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.alarm_application_nameColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property alarm_application_args() As String
      Get
        Try
          Return CType(Me(Me.tableAPPOINTMENT.alarm_application_argsColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'alarm_application_args' in table 'APPOINTMENT' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT.alarm_application_argsColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property ROOMRow() As ROOMRow
      Get
        Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ROOM_APPOINTMENT")), ROOMRow)
      End Get
      Set(ByVal value As ROOMRow)
        Me.SetParentRow(value, Me.Table.ParentRelations("FK_ROOM_APPOINTMENT"))
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IssubjectNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.subjectColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetsubjectNull()
      Me(Me.tableAPPOINTMENT.subjectColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsnotesNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.notesColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetnotesNull()
      Me(Me.tableAPPOINTMENT.notesColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IstooltiptextNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.tooltiptextColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SettooltiptextNull()
      Me(Me.tableAPPOINTMENT.tooltiptextColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsvisibleNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.visibleColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetvisibleNull()
      Me(Me.tableAPPOINTMENT.visibleColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsblockoutNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.blockoutColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetblockoutNull()
      Me(Me.tableAPPOINTMENT.blockoutColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsiseventNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.iseventColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetiseventNull()
      Me(Me.tableAPPOINTMENT.iseventColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsisflaggedNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.isflaggedColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetisflaggedNull()
      Me(Me.tableAPPOINTMENT.isflaggedColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsisreadonlyNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.isreadonlyColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetisreadonlyNull()
      Me(Me.tableAPPOINTMENT.isreadonlyColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsmaxlengthNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.maxlengthColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetmaxlengthNull()
      Me(Me.tableAPPOINTMENT.maxlengthColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsminlengthNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.minlengthColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetminlengthNull()
      Me(Me.tableAPPOINTMENT.minlengthColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isrecurrence_guidNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.recurrence_guidColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setrecurrence_guidNull()
      Me(Me.tableAPPOINTMENT.recurrence_guidColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isrecurrence_stampNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.recurrence_stampColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setrecurrence_stampNull()
      Me(Me.tableAPPOINTMENT.recurrence_stampColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IspriorityNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.priorityColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetpriorityNull()
      Me(Me.tableAPPOINTMENT.priorityColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isappearance_guidNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.appearance_guidColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setappearance_guidNull()
      Me(Me.tableAPPOINTMENT.appearance_guidColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isroom_guidNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.room_guidColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setroom_guidNull()
      Me(Me.tableAPPOINTMENT.room_guidColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isalarm_window_textNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.alarm_window_textColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setalarm_window_textNull()
      Me(Me.tableAPPOINTMENT.alarm_window_textColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isalarm_is_armedNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.alarm_is_armedColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setalarm_is_armedNull()
      Me(Me.tableAPPOINTMENT.alarm_is_armedColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isalarm_reminderNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.alarm_reminderColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setalarm_reminderNull()
      Me(Me.tableAPPOINTMENT.alarm_reminderColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isalarm_allow_openNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.alarm_allow_openColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setalarm_allow_openNull()
      Me(Me.tableAPPOINTMENT.alarm_allow_openColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isalarm_allow_snoozeNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.alarm_allow_snoozeColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setalarm_allow_snoozeNull()
      Me(Me.tableAPPOINTMENT.alarm_allow_snoozeColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isalarm_application_nameNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.alarm_application_nameColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setalarm_application_nameNull()
      Me(Me.tableAPPOINTMENT.alarm_application_nameColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isalarm_application_argsNull() As Boolean
      Return Me.IsNull(Me.tableAPPOINTMENT.alarm_application_argsColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setalarm_application_argsNull()
      Me(Me.tableAPPOINTMENT.alarm_application_argsColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function GetAPPOINTMENT_CATEGORYRows() As APPOINTMENT_CATEGORYRow()
      Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_APPOINTMENT_APPOINTMENT_CATEGORY")), APPOINTMENT_CATEGORYRow())
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function GetAPPOINTMENT_PROVIDERRows() As APPOINTMENT_PROVIDERRow()
      Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_APPOINTMENT_APPOINTMENT_PROVIDER")), APPOINTMENT_PROVIDERRow())
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class APPOINTMENT_CATEGORYRow
    Inherits System.Data.DataRow

    Private tableAPPOINTMENT_CATEGORY As APPOINTMENT_CATEGORYDataTable

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableAPPOINTMENT_CATEGORY = CType(Me.Table, APPOINTMENT_CATEGORYDataTable)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property appointment_guid() As String
      Get
        Return CType(Me(Me.tableAPPOINTMENT_CATEGORY.appointment_guidColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT_CATEGORY.appointment_guidColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property category_guid() As String
      Get
        Return CType(Me(Me.tableAPPOINTMENT_CATEGORY.category_guidColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT_CATEGORY.category_guidColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property CATEGORYRow() As CATEGORYRow
      Get
        Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CATEGORY_APPOINTMENT_CATEGORY")), CATEGORYRow)
      End Get
      Set(ByVal value As CATEGORYRow)
        Me.SetParentRow(value, Me.Table.ParentRelations("FK_CATEGORY_APPOINTMENT_CATEGORY"))
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property APPOINTMENTRow() As APPOINTMENTRow
      Get
        Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_APPOINTMENT_APPOINTMENT_CATEGORY")), APPOINTMENTRow)
      End Get
      Set(ByVal value As APPOINTMENTRow)
        Me.SetParentRow(value, Me.Table.ParentRelations("FK_APPOINTMENT_APPOINTMENT_CATEGORY"))
      End Set
    End Property
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class APPOINTMENT_PROVIDERRow
    Inherits System.Data.DataRow

    Private tableAPPOINTMENT_PROVIDER As APPOINTMENT_PROVIDERDataTable

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableAPPOINTMENT_PROVIDER = CType(Me.Table, APPOINTMENT_PROVIDERDataTable)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property appointment_guid() As String
      Get
        Return CType(Me(Me.tableAPPOINTMENT_PROVIDER.appointment_guidColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT_PROVIDER.appointment_guidColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property provider_guid() As String
      Get
        Return CType(Me(Me.tableAPPOINTMENT_PROVIDER.provider_guidColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tableAPPOINTMENT_PROVIDER.provider_guidColumn) = value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property PROVIDERRow() As PROVIDERRow
      Get
        Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PROVIDER_APPOINTMENT_PROVIDER")), PROVIDERRow)
      End Get
      Set(ByVal value As PROVIDERRow)
        Me.SetParentRow(value, Me.Table.ParentRelations("FK_PROVIDER_APPOINTMENT_PROVIDER"))
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property APPOINTMENTRow() As APPOINTMENTRow
      Get
        Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_APPOINTMENT_APPOINTMENT_PROVIDER")), APPOINTMENTRow)
      End Get
      Set(ByVal value As APPOINTMENTRow)
        Me.SetParentRow(value, Me.Table.ParentRelations("FK_APPOINTMENT_APPOINTMENT_PROVIDER"))
      End Set
    End Property
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class CATEGORYRow
    Inherits System.Data.DataRow

    Private tableCATEGORY As CATEGORYDataTable

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableCATEGORY = CType(Me.Table, CATEGORYDataTable)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property account_guid() As String
      Get
        Try
          Return CType(Me(Me.tableCATEGORY.account_guidColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'account_guid' in table 'CATEGORY' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableCATEGORY.account_guidColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property category_guid() As String
      Get
        Return CType(Me(Me.tableCATEGORY.category_guidColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tableCATEGORY.category_guidColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property name() As String
      Get
        Return CType(Me(Me.tableCATEGORY.nameColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tableCATEGORY.nameColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property color() As Integer
      Get
        Return CType(Me(Me.tableCATEGORY.colorColumn), Integer)
      End Get
      Set(ByVal value As Integer)
        Me(Me.tableCATEGORY.colorColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property notes() As String
      Get
        Try
          Return CType(Me(Me.tableCATEGORY.notesColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'notes' in table 'CATEGORY' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tableCATEGORY.notesColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isaccount_guidNull() As Boolean
      Return Me.IsNull(Me.tableCATEGORY.account_guidColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setaccount_guidNull()
      Me(Me.tableCATEGORY.account_guidColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsnotesNull() As Boolean
      Return Me.IsNull(Me.tableCATEGORY.notesColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetnotesNull()
      Me(Me.tableCATEGORY.notesColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function GetAPPOINTMENT_CATEGORYRows() As APPOINTMENT_CATEGORYRow()
      Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CATEGORY_APPOINTMENT_CATEGORY")), APPOINTMENT_CATEGORYRow())
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class PROVIDERRow
    Inherits System.Data.DataRow

    Private tablePROVIDER As PROVIDERDataTable

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tablePROVIDER = CType(Me.Table, PROVIDERDataTable)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property account_guid() As String
      Get
        Try
          Return CType(Me(Me.tablePROVIDER.account_guidColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'account_guid' in table 'PROVIDER' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tablePROVIDER.account_guidColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property provider_guid() As String
      Get
        Return CType(Me(Me.tablePROVIDER.provider_guidColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tablePROVIDER.provider_guidColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property name() As String
      Get
        Return CType(Me(Me.tablePROVIDER.nameColumn), String)
      End Get
      Set(ByVal value As String)
        Me(Me.tablePROVIDER.nameColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property color() As Integer
      Get
        Return CType(Me(Me.tablePROVIDER.colorColumn), Integer)
      End Get
      Set(ByVal value As Integer)
        Me(Me.tablePROVIDER.colorColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Property notes() As String
      Get
        Try
          Return CType(Me(Me.tablePROVIDER.notesColumn), String)
        Catch e As System.InvalidCastException
          Throw New System.Data.StrongTypingException("The value for column 'notes' in table 'PROVIDER' is DBNull.", e)
        End Try
      End Get
      Set(ByVal value As String)
        Me(Me.tablePROVIDER.notesColumn) = Value
      End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function Isaccount_guidNull() As Boolean
      Return Me.IsNull(Me.tablePROVIDER.account_guidColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub Setaccount_guidNull()
      Me(Me.tablePROVIDER.account_guidColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function IsnotesNull() As Boolean
      Return Me.IsNull(Me.tablePROVIDER.notesColumn)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub SetnotesNull()
      Me(Me.tablePROVIDER.notesColumn) = System.Convert.DBNull
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Function GetAPPOINTMENT_PROVIDERRows() As APPOINTMENT_PROVIDERRow()
      Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PROVIDER_APPOINTMENT_PROVIDER")), APPOINTMENT_PROVIDERRow())
    End Function
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class ROOMRowChangeEvent
    Inherits System.EventArgs

    Private eventRow As ROOMRow

    Private eventAction As System.Data.DataRowAction

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New(ByVal row As ROOMRow, ByVal action As System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Row() As ROOMRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Action() As System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class APPOINTMENTRowChangeEvent
    Inherits System.EventArgs

    Private eventRow As APPOINTMENTRow

    Private eventAction As System.Data.DataRowAction

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New(ByVal row As APPOINTMENTRow, ByVal action As System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Row() As APPOINTMENTRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Action() As System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class APPOINTMENT_CATEGORYRowChangeEvent
    Inherits System.EventArgs

    Private eventRow As APPOINTMENT_CATEGORYRow

    Private eventAction As System.Data.DataRowAction

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New(ByVal row As APPOINTMENT_CATEGORYRow, ByVal action As System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Row() As APPOINTMENT_CATEGORYRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Action() As System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class APPOINTMENT_PROVIDERRowChangeEvent
    Inherits System.EventArgs

    Private eventRow As APPOINTMENT_PROVIDERRow

    Private eventAction As System.Data.DataRowAction

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New(ByVal row As APPOINTMENT_PROVIDERRow, ByVal action As System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Row() As APPOINTMENT_PROVIDERRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Action() As System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class CATEGORYRowChangeEvent
    Inherits System.EventArgs

    Private eventRow As CATEGORYRow

    Private eventAction As System.Data.DataRowAction

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New(ByVal row As CATEGORYRow, ByVal action As System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Row() As CATEGORYRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Action() As System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class PROVIDERRowChangeEvent
    Inherits System.EventArgs

    Private eventRow As PROVIDERRow

    Private eventAction As System.Data.DataRowAction

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New(ByVal row As PROVIDERRow, ByVal action As System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Row() As PROVIDERRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public ReadOnly Property Action() As System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class
End Class
