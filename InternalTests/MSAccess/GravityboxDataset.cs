//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MSAccess {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class GravityboxDataset : DataSet {
        
        private APPOINTMENTDataTable tableAPPOINTMENT;
        
        public GravityboxDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected GravityboxDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["APPOINTMENT"] != null)) {
                    this.Tables.Add(new APPOINTMENTDataTable(ds.Tables["APPOINTMENT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public APPOINTMENTDataTable APPOINTMENT {
            get {
                return this.tableAPPOINTMENT;
            }
        }
        
        public override DataSet Clone() {
            GravityboxDataset cln = ((GravityboxDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["APPOINTMENT"] != null)) {
                this.Tables.Add(new APPOINTMENTDataTable(ds.Tables["APPOINTMENT"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAPPOINTMENT = ((APPOINTMENTDataTable)(this.Tables["APPOINTMENT"]));
            if ((this.tableAPPOINTMENT != null)) {
                this.tableAPPOINTMENT.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "GravityboxDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GravityboxDataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAPPOINTMENT = new APPOINTMENTDataTable();
            this.Tables.Add(this.tableAPPOINTMENT);
        }
        
        private bool ShouldSerializeAPPOINTMENT() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void APPOINTMENTRowChangeEventHandler(object sender, APPOINTMENTRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class APPOINTMENTDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnappointment_guid;
            
            private DataColumn columnstart_date;
            
            private DataColumn columnstart_time;
            
            private DataColumn columnlength;
            
            private DataColumn columnsubject;
            
            internal APPOINTMENTDataTable() : 
                    base("APPOINTMENT") {
                this.InitClass();
            }
            
            internal APPOINTMENTDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn appointment_guidColumn {
                get {
                    return this.columnappointment_guid;
                }
            }
            
            internal DataColumn start_dateColumn {
                get {
                    return this.columnstart_date;
                }
            }
            
            internal DataColumn start_timeColumn {
                get {
                    return this.columnstart_time;
                }
            }
            
            internal DataColumn lengthColumn {
                get {
                    return this.columnlength;
                }
            }
            
            internal DataColumn subjectColumn {
                get {
                    return this.columnsubject;
                }
            }
            
            public APPOINTMENTRow this[int index] {
                get {
                    return ((APPOINTMENTRow)(this.Rows[index]));
                }
            }
            
            public event APPOINTMENTRowChangeEventHandler APPOINTMENTRowChanged;
            
            public event APPOINTMENTRowChangeEventHandler APPOINTMENTRowChanging;
            
            public event APPOINTMENTRowChangeEventHandler APPOINTMENTRowDeleted;
            
            public event APPOINTMENTRowChangeEventHandler APPOINTMENTRowDeleting;
            
            public void AddAPPOINTMENTRow(APPOINTMENTRow row) {
                this.Rows.Add(row);
            }
            
            public APPOINTMENTRow AddAPPOINTMENTRow(string appointment_guid, System.DateTime start_date, System.DateTime start_time, int length, string subject) {
                APPOINTMENTRow rowAPPOINTMENTRow = ((APPOINTMENTRow)(this.NewRow()));
                rowAPPOINTMENTRow.ItemArray = new object[] {
                        appointment_guid,
                        start_date,
                        start_time,
                        length,
                        subject};
                this.Rows.Add(rowAPPOINTMENTRow);
                return rowAPPOINTMENTRow;
            }
            
            public APPOINTMENTRow FindByappointment_guid(string appointment_guid) {
                return ((APPOINTMENTRow)(this.Rows.Find(new object[] {
                            appointment_guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                APPOINTMENTDataTable cln = ((APPOINTMENTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new APPOINTMENTDataTable();
            }
            
            internal void InitVars() {
                this.columnappointment_guid = this.Columns["appointment_guid"];
                this.columnstart_date = this.Columns["start_date"];
                this.columnstart_time = this.Columns["start_time"];
                this.columnlength = this.Columns["length"];
                this.columnsubject = this.Columns["subject"];
            }
            
            private void InitClass() {
                this.columnappointment_guid = new DataColumn("appointment_guid", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnappointment_guid);
                this.columnstart_date = new DataColumn("start_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart_date);
                this.columnstart_time = new DataColumn("start_time", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart_time);
                this.columnlength = new DataColumn("length", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlength);
                this.columnsubject = new DataColumn("subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsubject);
                this.Constraints.Add(new UniqueConstraint("GravityboxDatasetKey1", new DataColumn[] {
                                this.columnappointment_guid}, true));
                this.columnappointment_guid.AllowDBNull = false;
                this.columnappointment_guid.Unique = true;
                this.columnstart_date.AllowDBNull = false;
                this.columnstart_time.AllowDBNull = false;
                this.columnlength.AllowDBNull = false;
            }
            
            public APPOINTMENTRow NewAPPOINTMENTRow() {
                return ((APPOINTMENTRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new APPOINTMENTRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(APPOINTMENTRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.APPOINTMENTRowChanged != null)) {
                    this.APPOINTMENTRowChanged(this, new APPOINTMENTRowChangeEvent(((APPOINTMENTRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.APPOINTMENTRowChanging != null)) {
                    this.APPOINTMENTRowChanging(this, new APPOINTMENTRowChangeEvent(((APPOINTMENTRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.APPOINTMENTRowDeleted != null)) {
                    this.APPOINTMENTRowDeleted(this, new APPOINTMENTRowChangeEvent(((APPOINTMENTRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.APPOINTMENTRowDeleting != null)) {
                    this.APPOINTMENTRowDeleting(this, new APPOINTMENTRowChangeEvent(((APPOINTMENTRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAPPOINTMENTRow(APPOINTMENTRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class APPOINTMENTRow : DataRow {
            
            private APPOINTMENTDataTable tableAPPOINTMENT;
            
            internal APPOINTMENTRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAPPOINTMENT = ((APPOINTMENTDataTable)(this.Table));
            }
            
            public string appointment_guid {
                get {
                    return ((string)(this[this.tableAPPOINTMENT.appointment_guidColumn]));
                }
                set {
                    this[this.tableAPPOINTMENT.appointment_guidColumn] = value;
                }
            }
            
            public System.DateTime start_date {
                get {
                    return ((System.DateTime)(this[this.tableAPPOINTMENT.start_dateColumn]));
                }
                set {
                    this[this.tableAPPOINTMENT.start_dateColumn] = value;
                }
            }
            
            public System.DateTime start_time {
                get {
                    return ((System.DateTime)(this[this.tableAPPOINTMENT.start_timeColumn]));
                }
                set {
                    this[this.tableAPPOINTMENT.start_timeColumn] = value;
                }
            }
            
            public int length {
                get {
                    return ((int)(this[this.tableAPPOINTMENT.lengthColumn]));
                }
                set {
                    this[this.tableAPPOINTMENT.lengthColumn] = value;
                }
            }
            
            public string subject {
                get {
                    try {
                        return ((string)(this[this.tableAPPOINTMENT.subjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAPPOINTMENT.subjectColumn] = value;
                }
            }
            
            public bool IssubjectNull() {
                return this.IsNull(this.tableAPPOINTMENT.subjectColumn);
            }
            
            public void SetsubjectNull() {
                this[this.tableAPPOINTMENT.subjectColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class APPOINTMENTRowChangeEvent : EventArgs {
            
            private APPOINTMENTRow eventRow;
            
            private DataRowAction eventAction;
            
            public APPOINTMENTRowChangeEvent(APPOINTMENTRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public APPOINTMENTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
