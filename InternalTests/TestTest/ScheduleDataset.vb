'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ScheduleDataset
    Inherits DataSet
    
    Private tableAPPOINTMENT As APPOINTMENTDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("APPOINTMENT")) Is Nothing) Then
                Me.Tables.Add(New APPOINTMENTDataTable(ds.Tables("APPOINTMENT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property APPOINTMENT As APPOINTMENTDataTable
        Get
            Return Me.tableAPPOINTMENT
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ScheduleDataset = CType(MyBase.Clone,ScheduleDataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("APPOINTMENT")) Is Nothing) Then
            Me.Tables.Add(New APPOINTMENTDataTable(ds.Tables("APPOINTMENT")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAPPOINTMENT = CType(Me.Tables("APPOINTMENT"),APPOINTMENTDataTable)
        If (Not (Me.tableAPPOINTMENT) Is Nothing) Then
            Me.tableAPPOINTMENT.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ScheduleDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ScheduleDataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAPPOINTMENT = New APPOINTMENTDataTable
        Me.Tables.Add(Me.tableAPPOINTMENT)
    End Sub
    
    Private Function ShouldSerializeAPPOINTMENT() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub APPOINTMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As APPOINTMENTRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnappointment_guid As DataColumn
        
        Private columnstart_date As DataColumn
        
        Private columnstart_time As DataColumn
        
        Private columnlength As DataColumn
        
        Private columnsubject As DataColumn
        
        Private columncustom_field1 As DataColumn
        
        Private columnzip As DataColumn
        
        Friend Sub New()
            MyBase.New("APPOINTMENT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property appointment_guidColumn As DataColumn
            Get
                Return Me.columnappointment_guid
            End Get
        End Property
        
        Friend ReadOnly Property start_dateColumn As DataColumn
            Get
                Return Me.columnstart_date
            End Get
        End Property
        
        Friend ReadOnly Property start_timeColumn As DataColumn
            Get
                Return Me.columnstart_time
            End Get
        End Property
        
        Friend ReadOnly Property lengthColumn As DataColumn
            Get
                Return Me.columnlength
            End Get
        End Property
        
        Friend ReadOnly Property subjectColumn As DataColumn
            Get
                Return Me.columnsubject
            End Get
        End Property
        
        Friend ReadOnly Property custom_field1Column As DataColumn
            Get
                Return Me.columncustom_field1
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As DataColumn
            Get
                Return Me.columnzip
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As APPOINTMENTRow
            Get
                Return CType(Me.Rows(index),APPOINTMENTRow)
            End Get
        End Property
        
        Public Event APPOINTMENTRowChanged As APPOINTMENTRowChangeEventHandler
        
        Public Event APPOINTMENTRowChanging As APPOINTMENTRowChangeEventHandler
        
        Public Event APPOINTMENTRowDeleted As APPOINTMENTRowChangeEventHandler
        
        Public Event APPOINTMENTRowDeleting As APPOINTMENTRowChangeEventHandler
        
        Public Overloads Sub AddAPPOINTMENTRow(ByVal row As APPOINTMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAPPOINTMENTRow(ByVal appointment_guid As String, ByVal start_date As Date, ByVal start_time As Date, ByVal length As Integer, ByVal subject As String, ByVal custom_field1 As String, ByVal zip As String) As APPOINTMENTRow
            Dim rowAPPOINTMENTRow As APPOINTMENTRow = CType(Me.NewRow,APPOINTMENTRow)
            rowAPPOINTMENTRow.ItemArray = New Object() {appointment_guid, start_date, start_time, length, subject, custom_field1, zip}
            Me.Rows.Add(rowAPPOINTMENTRow)
            Return rowAPPOINTMENTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As APPOINTMENTDataTable = CType(MyBase.Clone,APPOINTMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New APPOINTMENTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnappointment_guid = Me.Columns("appointment_guid")
            Me.columnstart_date = Me.Columns("start_date")
            Me.columnstart_time = Me.Columns("start_time")
            Me.columnlength = Me.Columns("length")
            Me.columnsubject = Me.Columns("subject")
            Me.columncustom_field1 = Me.Columns("custom_field1")
            Me.columnzip = Me.Columns("zip")
        End Sub
        
        Private Sub InitClass()
            Me.columnappointment_guid = New DataColumn("appointment_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnappointment_guid)
            Me.columnstart_date = New DataColumn("start_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstart_date)
            Me.columnstart_time = New DataColumn("start_time", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstart_time)
            Me.columnlength = New DataColumn("length", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlength)
            Me.columnsubject = New DataColumn("subject", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubject)
            Me.columncustom_field1 = New DataColumn("custom_field1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustom_field1)
            Me.columnzip = New DataColumn("zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip)
            Me.Constraints.Add(New UniqueConstraint("ScheduleDatasetKey1", New DataColumn() {Me.columnappointment_guid}, false))
            Me.columnappointment_guid.AllowDBNull = false
            Me.columnappointment_guid.Unique = true
            Me.columnstart_time.AllowDBNull = false
        End Sub
        
        Public Function NewAPPOINTMENTRow() As APPOINTMENTRow
            Return CType(Me.NewRow,APPOINTMENTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New APPOINTMENTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(APPOINTMENTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.APPOINTMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent APPOINTMENTRowChanged(Me, New APPOINTMENTRowChangeEvent(CType(e.Row,APPOINTMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.APPOINTMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent APPOINTMENTRowChanging(Me, New APPOINTMENTRowChangeEvent(CType(e.Row,APPOINTMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.APPOINTMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent APPOINTMENTRowDeleted(Me, New APPOINTMENTRowChangeEvent(CType(e.Row,APPOINTMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.APPOINTMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent APPOINTMENTRowDeleting(Me, New APPOINTMENTRowChangeEvent(CType(e.Row,APPOINTMENTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAPPOINTMENTRow(ByVal row As APPOINTMENTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENTRow
        Inherits DataRow
        
        Private tableAPPOINTMENT As APPOINTMENTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAPPOINTMENT = CType(Me.Table,APPOINTMENTDataTable)
        End Sub
        
        Public Property appointment_guid As String
            Get
                Return CType(Me(Me.tableAPPOINTMENT.appointment_guidColumn),String)
            End Get
            Set
                Me(Me.tableAPPOINTMENT.appointment_guidColumn) = value
            End Set
        End Property
        
        Public Property start_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.start_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.start_dateColumn) = value
            End Set
        End Property
        
        Public Property start_time As Date
            Get
                Return CType(Me(Me.tableAPPOINTMENT.start_timeColumn),Date)
            End Get
            Set
                Me(Me.tableAPPOINTMENT.start_timeColumn) = value
            End Set
        End Property
        
        Public Property length As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.lengthColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.lengthColumn) = value
            End Set
        End Property
        
        Public Property subject As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.subjectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.subjectColumn) = value
            End Set
        End Property
        
        Public Property custom_field1 As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.custom_field1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.custom_field1Column) = value
            End Set
        End Property
        
        Public Property zip As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.zipColumn) = value
            End Set
        End Property
        
        Public Function Isstart_dateNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.start_dateColumn)
        End Function
        
        Public Sub Setstart_dateNull()
            Me(Me.tableAPPOINTMENT.start_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslengthNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.lengthColumn)
        End Function
        
        Public Sub SetlengthNull()
            Me(Me.tableAPPOINTMENT.lengthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssubjectNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.subjectColumn)
        End Function
        
        Public Sub SetsubjectNull()
            Me(Me.tableAPPOINTMENT.subjectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscustom_field1Null() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.custom_field1Column)
        End Function
        
        Public Sub Setcustom_field1Null()
            Me(Me.tableAPPOINTMENT.custom_field1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IszipNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.zipColumn)
        End Function
        
        Public Sub SetzipNull()
            Me(Me.tableAPPOINTMENT.zipColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As APPOINTMENTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As APPOINTMENTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As APPOINTMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
