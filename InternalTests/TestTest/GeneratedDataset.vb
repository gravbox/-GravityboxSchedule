'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class GeneratedDataset
    Inherits DataSet
    
    Private tableROOM As ROOMDataTable
    
    Private tableAPPOINTMENT As APPOINTMENTDataTable
    
    Private tableAPPOINTMENT_CATEGORY As APPOINTMENT_CATEGORYDataTable
    
    Private tableAPPOINTMENT_PROVIDER As APPOINTMENT_PROVIDERDataTable
    
    Private tableCATEGORY As CATEGORYDataTable
    
    Private tablePROVIDER As PROVIDERDataTable
    
    Private relationFK_CATEGORY_APPOINTMENT_CATEGORY As DataRelation
    
    Private relationFK_PROVIDER_APPOINTMENT_PROVIDER As DataRelation
    
    Private relationFK_APPOINTMENT_APPOINTMENT_CATEGORY As DataRelation
    
    Private relationFK_APPOINTMENT_APPOINTMENT_PROVIDER As DataRelation
    
    Private relationFK_ROOM_APPOINTMENT As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ROOM")) Is Nothing) Then
                Me.Tables.Add(New ROOMDataTable(ds.Tables("ROOM")))
            End If
            If (Not (ds.Tables("APPOINTMENT")) Is Nothing) Then
                Me.Tables.Add(New APPOINTMENTDataTable(ds.Tables("APPOINTMENT")))
            End If
            If (Not (ds.Tables("APPOINTMENT_CATEGORY")) Is Nothing) Then
                Me.Tables.Add(New APPOINTMENT_CATEGORYDataTable(ds.Tables("APPOINTMENT_CATEGORY")))
            End If
            If (Not (ds.Tables("APPOINTMENT_PROVIDER")) Is Nothing) Then
                Me.Tables.Add(New APPOINTMENT_PROVIDERDataTable(ds.Tables("APPOINTMENT_PROVIDER")))
            End If
            If (Not (ds.Tables("CATEGORY")) Is Nothing) Then
                Me.Tables.Add(New CATEGORYDataTable(ds.Tables("CATEGORY")))
            End If
            If (Not (ds.Tables("PROVIDER")) Is Nothing) Then
                Me.Tables.Add(New PROVIDERDataTable(ds.Tables("PROVIDER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ROOM As ROOMDataTable
        Get
            Return Me.tableROOM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property APPOINTMENT As APPOINTMENTDataTable
        Get
            Return Me.tableAPPOINTMENT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property APPOINTMENT_CATEGORY As APPOINTMENT_CATEGORYDataTable
        Get
            Return Me.tableAPPOINTMENT_CATEGORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property APPOINTMENT_PROVIDER As APPOINTMENT_PROVIDERDataTable
        Get
            Return Me.tableAPPOINTMENT_PROVIDER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CATEGORY As CATEGORYDataTable
        Get
            Return Me.tableCATEGORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROVIDER As PROVIDERDataTable
        Get
            Return Me.tablePROVIDER
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As GeneratedDataset = CType(MyBase.Clone,GeneratedDataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ROOM")) Is Nothing) Then
            Me.Tables.Add(New ROOMDataTable(ds.Tables("ROOM")))
        End If
        If (Not (ds.Tables("APPOINTMENT")) Is Nothing) Then
            Me.Tables.Add(New APPOINTMENTDataTable(ds.Tables("APPOINTMENT")))
        End If
        If (Not (ds.Tables("APPOINTMENT_CATEGORY")) Is Nothing) Then
            Me.Tables.Add(New APPOINTMENT_CATEGORYDataTable(ds.Tables("APPOINTMENT_CATEGORY")))
        End If
        If (Not (ds.Tables("APPOINTMENT_PROVIDER")) Is Nothing) Then
            Me.Tables.Add(New APPOINTMENT_PROVIDERDataTable(ds.Tables("APPOINTMENT_PROVIDER")))
        End If
        If (Not (ds.Tables("CATEGORY")) Is Nothing) Then
            Me.Tables.Add(New CATEGORYDataTable(ds.Tables("CATEGORY")))
        End If
        If (Not (ds.Tables("PROVIDER")) Is Nothing) Then
            Me.Tables.Add(New PROVIDERDataTable(ds.Tables("PROVIDER")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableROOM = CType(Me.Tables("ROOM"),ROOMDataTable)
        If (Not (Me.tableROOM) Is Nothing) Then
            Me.tableROOM.InitVars
        End If
        Me.tableAPPOINTMENT = CType(Me.Tables("APPOINTMENT"),APPOINTMENTDataTable)
        If (Not (Me.tableAPPOINTMENT) Is Nothing) Then
            Me.tableAPPOINTMENT.InitVars
        End If
        Me.tableAPPOINTMENT_CATEGORY = CType(Me.Tables("APPOINTMENT_CATEGORY"),APPOINTMENT_CATEGORYDataTable)
        If (Not (Me.tableAPPOINTMENT_CATEGORY) Is Nothing) Then
            Me.tableAPPOINTMENT_CATEGORY.InitVars
        End If
        Me.tableAPPOINTMENT_PROVIDER = CType(Me.Tables("APPOINTMENT_PROVIDER"),APPOINTMENT_PROVIDERDataTable)
        If (Not (Me.tableAPPOINTMENT_PROVIDER) Is Nothing) Then
            Me.tableAPPOINTMENT_PROVIDER.InitVars
        End If
        Me.tableCATEGORY = CType(Me.Tables("CATEGORY"),CATEGORYDataTable)
        If (Not (Me.tableCATEGORY) Is Nothing) Then
            Me.tableCATEGORY.InitVars
        End If
        Me.tablePROVIDER = CType(Me.Tables("PROVIDER"),PROVIDERDataTable)
        If (Not (Me.tablePROVIDER) Is Nothing) Then
            Me.tablePROVIDER.InitVars
        End If
        Me.relationFK_CATEGORY_APPOINTMENT_CATEGORY = Me.Relations("FK_CATEGORY_APPOINTMENT_CATEGORY")
        Me.relationFK_PROVIDER_APPOINTMENT_PROVIDER = Me.Relations("FK_PROVIDER_APPOINTMENT_PROVIDER")
        Me.relationFK_APPOINTMENT_APPOINTMENT_CATEGORY = Me.Relations("FK_APPOINTMENT_APPOINTMENT_CATEGORY")
        Me.relationFK_APPOINTMENT_APPOINTMENT_PROVIDER = Me.Relations("FK_APPOINTMENT_APPOINTMENT_PROVIDER")
        Me.relationFK_ROOM_APPOINTMENT = Me.Relations("FK_ROOM_APPOINTMENT")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "GeneratedDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/GeneratedDataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableROOM = New ROOMDataTable
        Me.Tables.Add(Me.tableROOM)
        Me.tableAPPOINTMENT = New APPOINTMENTDataTable
        Me.Tables.Add(Me.tableAPPOINTMENT)
        Me.tableAPPOINTMENT_CATEGORY = New APPOINTMENT_CATEGORYDataTable
        Me.Tables.Add(Me.tableAPPOINTMENT_CATEGORY)
        Me.tableAPPOINTMENT_PROVIDER = New APPOINTMENT_PROVIDERDataTable
        Me.Tables.Add(Me.tableAPPOINTMENT_PROVIDER)
        Me.tableCATEGORY = New CATEGORYDataTable
        Me.Tables.Add(Me.tableCATEGORY)
        Me.tablePROVIDER = New PROVIDERDataTable
        Me.Tables.Add(Me.tablePROVIDER)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("FK_ROOM_APPOINTMENT", New DataColumn() {Me.tableROOM.room_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT.room_guidColumn})
        Me.tableAPPOINTMENT.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FK_CATEGORY_APPOINTMENT_CATEGORY", New DataColumn() {Me.tableCATEGORY.category_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT_CATEGORY.category_guidColumn})
        Me.tableAPPOINTMENT_CATEGORY.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FK_APPOINTMENT_APPOINTMENT_CATEGORY", New DataColumn() {Me.tableAPPOINTMENT.appointment_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT_CATEGORY.appointment_guidColumn})
        Me.tableAPPOINTMENT_CATEGORY.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FK_PROVIDER_APPOINTMENT_PROVIDER", New DataColumn() {Me.tablePROVIDER.provider_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT_PROVIDER.provider_guidColumn})
        Me.tableAPPOINTMENT_PROVIDER.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FK_APPOINTMENT_APPOINTMENT_PROVIDER", New DataColumn() {Me.tableAPPOINTMENT.appointment_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT_PROVIDER.appointment_guidColumn})
        Me.tableAPPOINTMENT_PROVIDER.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationFK_CATEGORY_APPOINTMENT_CATEGORY = New DataRelation("FK_CATEGORY_APPOINTMENT_CATEGORY", New DataColumn() {Me.tableCATEGORY.category_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT_CATEGORY.category_guidColumn}, false)
        Me.Relations.Add(Me.relationFK_CATEGORY_APPOINTMENT_CATEGORY)
        Me.relationFK_PROVIDER_APPOINTMENT_PROVIDER = New DataRelation("FK_PROVIDER_APPOINTMENT_PROVIDER", New DataColumn() {Me.tablePROVIDER.provider_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT_PROVIDER.provider_guidColumn}, false)
        Me.Relations.Add(Me.relationFK_PROVIDER_APPOINTMENT_PROVIDER)
        Me.relationFK_APPOINTMENT_APPOINTMENT_CATEGORY = New DataRelation("FK_APPOINTMENT_APPOINTMENT_CATEGORY", New DataColumn() {Me.tableAPPOINTMENT.appointment_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT_CATEGORY.appointment_guidColumn}, false)
        Me.Relations.Add(Me.relationFK_APPOINTMENT_APPOINTMENT_CATEGORY)
        Me.relationFK_APPOINTMENT_APPOINTMENT_PROVIDER = New DataRelation("FK_APPOINTMENT_APPOINTMENT_PROVIDER", New DataColumn() {Me.tableAPPOINTMENT.appointment_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT_PROVIDER.appointment_guidColumn}, false)
        Me.Relations.Add(Me.relationFK_APPOINTMENT_APPOINTMENT_PROVIDER)
        Me.relationFK_ROOM_APPOINTMENT = New DataRelation("FK_ROOM_APPOINTMENT", New DataColumn() {Me.tableROOM.room_guidColumn}, New DataColumn() {Me.tableAPPOINTMENT.room_guidColumn}, false)
        Me.Relations.Add(Me.relationFK_ROOM_APPOINTMENT)
    End Sub
    
    Private Function ShouldSerializeROOM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAPPOINTMENT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAPPOINTMENT_CATEGORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAPPOINTMENT_PROVIDER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCATEGORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePROVIDER() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ROOMRowChangeEventHandler(ByVal sender As Object, ByVal e As ROOMRowChangeEvent)
    
    Public Delegate Sub APPOINTMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As APPOINTMENTRowChangeEvent)
    
    Public Delegate Sub APPOINTMENT_CATEGORYRowChangeEventHandler(ByVal sender As Object, ByVal e As APPOINTMENT_CATEGORYRowChangeEvent)
    
    Public Delegate Sub APPOINTMENT_PROVIDERRowChangeEventHandler(ByVal sender As Object, ByVal e As APPOINTMENT_PROVIDERRowChangeEvent)
    
    Public Delegate Sub CATEGORYRowChangeEventHandler(ByVal sender As Object, ByVal e As CATEGORYRowChangeEvent)
    
    Public Delegate Sub PROVIDERRowChangeEventHandler(ByVal sender As Object, ByVal e As PROVIDERRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ROOMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnroom_guid As DataColumn
        
        Private columnname As DataColumn
        
        Private columnnotes As DataColumn
        
        Friend Sub New()
            MyBase.New("ROOM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property room_guidColumn As DataColumn
            Get
                Return Me.columnroom_guid
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property notesColumn As DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ROOMRow
            Get
                Return CType(Me.Rows(index),ROOMRow)
            End Get
        End Property
        
        Public Event ROOMRowChanged As ROOMRowChangeEventHandler
        
        Public Event ROOMRowChanging As ROOMRowChangeEventHandler
        
        Public Event ROOMRowDeleted As ROOMRowChangeEventHandler
        
        Public Event ROOMRowDeleting As ROOMRowChangeEventHandler
        
        Public Overloads Sub AddROOMRow(ByVal row As ROOMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddROOMRow(ByVal room_guid As String, ByVal name As String, ByVal notes As String) As ROOMRow
            Dim rowROOMRow As ROOMRow = CType(Me.NewRow,ROOMRow)
            rowROOMRow.ItemArray = New Object() {room_guid, name, notes}
            Me.Rows.Add(rowROOMRow)
            Return rowROOMRow
        End Function
        
        Public Function FindByroom_guid(ByVal room_guid As String) As ROOMRow
            Return CType(Me.Rows.Find(New Object() {room_guid}),ROOMRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ROOMDataTable = CType(MyBase.Clone,ROOMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ROOMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnroom_guid = Me.Columns("room_guid")
            Me.columnname = Me.Columns("name")
            Me.columnnotes = Me.Columns("notes")
        End Sub
        
        Private Sub InitClass()
            Me.columnroom_guid = New DataColumn("room_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnroom_guid)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnnotes = New DataColumn("notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotes)
            Me.Constraints.Add(New UniqueConstraint("PK_ROOM", New DataColumn() {Me.columnroom_guid}, true))
            Me.columnroom_guid.AllowDBNull = false
            Me.columnroom_guid.Unique = true
            Me.columnname.AllowDBNull = false
        End Sub
        
        Public Function NewROOMRow() As ROOMRow
            Return CType(Me.NewRow,ROOMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ROOMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ROOMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ROOMRowChangedEvent) Is Nothing) Then
                RaiseEvent ROOMRowChanged(Me, New ROOMRowChangeEvent(CType(e.Row,ROOMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ROOMRowChangingEvent) Is Nothing) Then
                RaiseEvent ROOMRowChanging(Me, New ROOMRowChangeEvent(CType(e.Row,ROOMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ROOMRowDeletedEvent) Is Nothing) Then
                RaiseEvent ROOMRowDeleted(Me, New ROOMRowChangeEvent(CType(e.Row,ROOMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ROOMRowDeletingEvent) Is Nothing) Then
                RaiseEvent ROOMRowDeleting(Me, New ROOMRowChangeEvent(CType(e.Row,ROOMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveROOMRow(ByVal row As ROOMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ROOMRow
        Inherits DataRow
        
        Private tableROOM As ROOMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableROOM = CType(Me.Table,ROOMDataTable)
        End Sub
        
        Public Property room_guid As String
            Get
                Return CType(Me(Me.tableROOM.room_guidColumn),String)
            End Get
            Set
                Me(Me.tableROOM.room_guidColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Return CType(Me(Me.tableROOM.nameColumn),String)
            End Get
            Set
                Me(Me.tableROOM.nameColumn) = value
            End Set
        End Property
        
        Public Property notes As String
            Get
                Try 
                    Return CType(Me(Me.tableROOM.notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableROOM.notesColumn) = value
            End Set
        End Property
        
        Public Function IsnotesNull() As Boolean
            Return Me.IsNull(Me.tableROOM.notesColumn)
        End Function
        
        Public Sub SetnotesNull()
            Me(Me.tableROOM.notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAPPOINTMENTRows() As APPOINTMENTRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FK_ROOM_APPOINTMENT")),APPOINTMENTRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ROOMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ROOMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ROOMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ROOMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnappointment_guid As DataColumn
        
        Private columnstart_date As DataColumn
        
        Private columnlength As DataColumn
        
        Private columnsubject As DataColumn
        
        Private columnnotes As DataColumn
        
        Private columntooltiptext As DataColumn
        
        Private columnvisible As DataColumn
        
        Private columnblockout As DataColumn
        
        Private columnisevent As DataColumn
        
        Private columnisflagged As DataColumn
        
        Private columnisreadonly As DataColumn
        
        Private columnmaxlength As DataColumn
        
        Private columnminlength As DataColumn
        
        Private columnpriority As DataColumn
        
        Private columnappearance_guid As DataColumn
        
        Private columnroom_guid As DataColumn
        
        Private columnalarm_window_text As DataColumn
        
        Private columnalarm_is_armed As DataColumn
        
        Private columnalarm_reminder As DataColumn
        
        Private columnalarm_allow_open As DataColumn
        
        Private columnalarm_allow_snooze As DataColumn
        
        Private columnalarm_application_name As DataColumn
        
        Private columnalarm_application_args As DataColumn
        
        Private columnalarm_was_dismissed As DataColumn
        
        Friend Sub New()
            MyBase.New("APPOINTMENT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property appointment_guidColumn As DataColumn
            Get
                Return Me.columnappointment_guid
            End Get
        End Property
        
        Friend ReadOnly Property start_dateColumn As DataColumn
            Get
                Return Me.columnstart_date
            End Get
        End Property
        
        Friend ReadOnly Property lengthColumn As DataColumn
            Get
                Return Me.columnlength
            End Get
        End Property
        
        Friend ReadOnly Property subjectColumn As DataColumn
            Get
                Return Me.columnsubject
            End Get
        End Property
        
        Friend ReadOnly Property notesColumn As DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        Friend ReadOnly Property tooltiptextColumn As DataColumn
            Get
                Return Me.columntooltiptext
            End Get
        End Property
        
        Friend ReadOnly Property visibleColumn As DataColumn
            Get
                Return Me.columnvisible
            End Get
        End Property
        
        Friend ReadOnly Property blockoutColumn As DataColumn
            Get
                Return Me.columnblockout
            End Get
        End Property
        
        Friend ReadOnly Property iseventColumn As DataColumn
            Get
                Return Me.columnisevent
            End Get
        End Property
        
        Friend ReadOnly Property isflaggedColumn As DataColumn
            Get
                Return Me.columnisflagged
            End Get
        End Property
        
        Friend ReadOnly Property isreadonlyColumn As DataColumn
            Get
                Return Me.columnisreadonly
            End Get
        End Property
        
        Friend ReadOnly Property maxlengthColumn As DataColumn
            Get
                Return Me.columnmaxlength
            End Get
        End Property
        
        Friend ReadOnly Property minlengthColumn As DataColumn
            Get
                Return Me.columnminlength
            End Get
        End Property
        
        Friend ReadOnly Property priorityColumn As DataColumn
            Get
                Return Me.columnpriority
            End Get
        End Property
        
        Friend ReadOnly Property appearance_guidColumn As DataColumn
            Get
                Return Me.columnappearance_guid
            End Get
        End Property
        
        Friend ReadOnly Property room_guidColumn As DataColumn
            Get
                Return Me.columnroom_guid
            End Get
        End Property
        
        Friend ReadOnly Property alarm_window_textColumn As DataColumn
            Get
                Return Me.columnalarm_window_text
            End Get
        End Property
        
        Friend ReadOnly Property alarm_is_armedColumn As DataColumn
            Get
                Return Me.columnalarm_is_armed
            End Get
        End Property
        
        Friend ReadOnly Property alarm_reminderColumn As DataColumn
            Get
                Return Me.columnalarm_reminder
            End Get
        End Property
        
        Friend ReadOnly Property alarm_allow_openColumn As DataColumn
            Get
                Return Me.columnalarm_allow_open
            End Get
        End Property
        
        Friend ReadOnly Property alarm_allow_snoozeColumn As DataColumn
            Get
                Return Me.columnalarm_allow_snooze
            End Get
        End Property
        
        Friend ReadOnly Property alarm_application_nameColumn As DataColumn
            Get
                Return Me.columnalarm_application_name
            End Get
        End Property
        
        Friend ReadOnly Property alarm_application_argsColumn As DataColumn
            Get
                Return Me.columnalarm_application_args
            End Get
        End Property
        
        Friend ReadOnly Property alarm_was_dismissedColumn As DataColumn
            Get
                Return Me.columnalarm_was_dismissed
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As APPOINTMENTRow
            Get
                Return CType(Me.Rows(index),APPOINTMENTRow)
            End Get
        End Property
        
        Public Event APPOINTMENTRowChanged As APPOINTMENTRowChangeEventHandler
        
        Public Event APPOINTMENTRowChanging As APPOINTMENTRowChangeEventHandler
        
        Public Event APPOINTMENTRowDeleted As APPOINTMENTRowChangeEventHandler
        
        Public Event APPOINTMENTRowDeleting As APPOINTMENTRowChangeEventHandler
        
        Public Overloads Sub AddAPPOINTMENTRow(ByVal row As APPOINTMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAPPOINTMENTRow( _
                    ByVal appointment_guid As String,  _
                    ByVal start_date As Date,  _
                    ByVal length As Integer,  _
                    ByVal subject As String,  _
                    ByVal notes As String,  _
                    ByVal tooltiptext As String,  _
                    ByVal visible As Boolean,  _
                    ByVal blockout As Boolean,  _
                    ByVal isevent As Boolean,  _
                    ByVal isflagged As Boolean,  _
                    ByVal isreadonly As Boolean,  _
                    ByVal maxlength As Integer,  _
                    ByVal minlength As Integer,  _
                    ByVal priority As Integer,  _
                    ByVal appearance_guid As String,  _
                    ByVal parentROOMRowByFK_ROOM_APPOINTMENT As ROOMRow,  _
                    ByVal alarm_window_text As String,  _
                    ByVal alarm_is_armed As Boolean,  _
                    ByVal alarm_reminder As Integer,  _
                    ByVal alarm_allow_open As Boolean,  _
                    ByVal alarm_allow_snooze As Boolean,  _
                    ByVal alarm_application_name As String,  _
                    ByVal alarm_application_args As String,  _
                    ByVal alarm_was_dismissed As Boolean) As APPOINTMENTRow
            Dim rowAPPOINTMENTRow As APPOINTMENTRow = CType(Me.NewRow,APPOINTMENTRow)
            rowAPPOINTMENTRow.ItemArray = New Object() {appointment_guid, start_date, length, subject, notes, tooltiptext, visible, blockout, isevent, isflagged, isreadonly, maxlength, minlength, priority, appearance_guid, parentROOMRowByFK_ROOM_APPOINTMENT(0), alarm_window_text, alarm_is_armed, alarm_reminder, alarm_allow_open, alarm_allow_snooze, alarm_application_name, alarm_application_args, alarm_was_dismissed}
            Me.Rows.Add(rowAPPOINTMENTRow)
            Return rowAPPOINTMENTRow
        End Function
        
        Public Function FindByappointment_guid(ByVal appointment_guid As String) As APPOINTMENTRow
            Return CType(Me.Rows.Find(New Object() {appointment_guid}),APPOINTMENTRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As APPOINTMENTDataTable = CType(MyBase.Clone,APPOINTMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New APPOINTMENTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnappointment_guid = Me.Columns("appointment_guid")
            Me.columnstart_date = Me.Columns("start_date")
            Me.columnlength = Me.Columns("length")
            Me.columnsubject = Me.Columns("subject")
            Me.columnnotes = Me.Columns("notes")
            Me.columntooltiptext = Me.Columns("tooltiptext")
            Me.columnvisible = Me.Columns("visible")
            Me.columnblockout = Me.Columns("blockout")
            Me.columnisevent = Me.Columns("isevent")
            Me.columnisflagged = Me.Columns("isflagged")
            Me.columnisreadonly = Me.Columns("isreadonly")
            Me.columnmaxlength = Me.Columns("maxlength")
            Me.columnminlength = Me.Columns("minlength")
            Me.columnpriority = Me.Columns("priority")
            Me.columnappearance_guid = Me.Columns("appearance_guid")
            Me.columnroom_guid = Me.Columns("room_guid")
            Me.columnalarm_window_text = Me.Columns("alarm_window_text")
            Me.columnalarm_is_armed = Me.Columns("alarm_is_armed")
            Me.columnalarm_reminder = Me.Columns("alarm_reminder")
            Me.columnalarm_allow_open = Me.Columns("alarm_allow_open")
            Me.columnalarm_allow_snooze = Me.Columns("alarm_allow_snooze")
            Me.columnalarm_application_name = Me.Columns("alarm_application_name")
            Me.columnalarm_application_args = Me.Columns("alarm_application_args")
            Me.columnalarm_was_dismissed = Me.Columns("alarm_was_dismissed")
        End Sub
        
        Private Sub InitClass()
            Me.columnappointment_guid = New DataColumn("appointment_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnappointment_guid)
            Me.columnstart_date = New DataColumn("start_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstart_date)
            Me.columnlength = New DataColumn("length", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlength)
            Me.columnsubject = New DataColumn("subject", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubject)
            Me.columnnotes = New DataColumn("notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotes)
            Me.columntooltiptext = New DataColumn("tooltiptext", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntooltiptext)
            Me.columnvisible = New DataColumn("visible", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvisible)
            Me.columnblockout = New DataColumn("blockout", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnblockout)
            Me.columnisevent = New DataColumn("isevent", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisevent)
            Me.columnisflagged = New DataColumn("isflagged", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisflagged)
            Me.columnisreadonly = New DataColumn("isreadonly", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisreadonly)
            Me.columnmaxlength = New DataColumn("maxlength", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxlength)
            Me.columnminlength = New DataColumn("minlength", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnminlength)
            Me.columnpriority = New DataColumn("priority", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpriority)
            Me.columnappearance_guid = New DataColumn("appearance_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnappearance_guid)
            Me.columnroom_guid = New DataColumn("room_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnroom_guid)
            Me.columnalarm_window_text = New DataColumn("alarm_window_text", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnalarm_window_text)
            Me.columnalarm_is_armed = New DataColumn("alarm_is_armed", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnalarm_is_armed)
            Me.columnalarm_reminder = New DataColumn("alarm_reminder", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnalarm_reminder)
            Me.columnalarm_allow_open = New DataColumn("alarm_allow_open", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnalarm_allow_open)
            Me.columnalarm_allow_snooze = New DataColumn("alarm_allow_snooze", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnalarm_allow_snooze)
            Me.columnalarm_application_name = New DataColumn("alarm_application_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnalarm_application_name)
            Me.columnalarm_application_args = New DataColumn("alarm_application_args", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnalarm_application_args)
            Me.columnalarm_was_dismissed = New DataColumn("alarm_was_dismissed", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnalarm_was_dismissed)
            Me.Constraints.Add(New UniqueConstraint("PK_APPOINTMENT", New DataColumn() {Me.columnappointment_guid}, true))
            Me.columnappointment_guid.AllowDBNull = false
            Me.columnappointment_guid.Unique = true
            Me.columnstart_date.AllowDBNull = false
            Me.columnlength.AllowDBNull = false
        End Sub
        
        Public Function NewAPPOINTMENTRow() As APPOINTMENTRow
            Return CType(Me.NewRow,APPOINTMENTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New APPOINTMENTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(APPOINTMENTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.APPOINTMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent APPOINTMENTRowChanged(Me, New APPOINTMENTRowChangeEvent(CType(e.Row,APPOINTMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.APPOINTMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent APPOINTMENTRowChanging(Me, New APPOINTMENTRowChangeEvent(CType(e.Row,APPOINTMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.APPOINTMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent APPOINTMENTRowDeleted(Me, New APPOINTMENTRowChangeEvent(CType(e.Row,APPOINTMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.APPOINTMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent APPOINTMENTRowDeleting(Me, New APPOINTMENTRowChangeEvent(CType(e.Row,APPOINTMENTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAPPOINTMENTRow(ByVal row As APPOINTMENTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENTRow
        Inherits DataRow
        
        Private tableAPPOINTMENT As APPOINTMENTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAPPOINTMENT = CType(Me.Table,APPOINTMENTDataTable)
        End Sub
        
        Public Property appointment_guid As String
            Get
                Return CType(Me(Me.tableAPPOINTMENT.appointment_guidColumn),String)
            End Get
            Set
                Me(Me.tableAPPOINTMENT.appointment_guidColumn) = value
            End Set
        End Property
        
        Public Property start_date As Date
            Get
                Return CType(Me(Me.tableAPPOINTMENT.start_dateColumn),Date)
            End Get
            Set
                Me(Me.tableAPPOINTMENT.start_dateColumn) = value
            End Set
        End Property
        
        Public Property length As Integer
            Get
                Return CType(Me(Me.tableAPPOINTMENT.lengthColumn),Integer)
            End Get
            Set
                Me(Me.tableAPPOINTMENT.lengthColumn) = value
            End Set
        End Property
        
        Public Property subject As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.subjectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.subjectColumn) = value
            End Set
        End Property
        
        Public Property notes As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.notesColumn) = value
            End Set
        End Property
        
        Public Property tooltiptext As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.tooltiptextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.tooltiptextColumn) = value
            End Set
        End Property
        
        Public Property visible As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.visibleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.visibleColumn) = value
            End Set
        End Property
        
        Public Property blockout As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.blockoutColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.blockoutColumn) = value
            End Set
        End Property
        
        Public Property isevent As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.iseventColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.iseventColumn) = value
            End Set
        End Property
        
        Public Property isflagged As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.isflaggedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.isflaggedColumn) = value
            End Set
        End Property
        
        Public Property isreadonly As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.isreadonlyColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.isreadonlyColumn) = value
            End Set
        End Property
        
        Public Property maxlength As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.maxlengthColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.maxlengthColumn) = value
            End Set
        End Property
        
        Public Property minlength As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.minlengthColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.minlengthColumn) = value
            End Set
        End Property
        
        Public Property priority As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.priorityColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.priorityColumn) = value
            End Set
        End Property
        
        Public Property appearance_guid As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.appearance_guidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.appearance_guidColumn) = value
            End Set
        End Property
        
        Public Property room_guid As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.room_guidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.room_guidColumn) = value
            End Set
        End Property
        
        Public Property alarm_window_text As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.alarm_window_textColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.alarm_window_textColumn) = value
            End Set
        End Property
        
        Public Property alarm_is_armed As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.alarm_is_armedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.alarm_is_armedColumn) = value
            End Set
        End Property
        
        Public Property alarm_reminder As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.alarm_reminderColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.alarm_reminderColumn) = value
            End Set
        End Property
        
        Public Property alarm_allow_open As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.alarm_allow_openColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.alarm_allow_openColumn) = value
            End Set
        End Property
        
        Public Property alarm_allow_snooze As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.alarm_allow_snoozeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.alarm_allow_snoozeColumn) = value
            End Set
        End Property
        
        Public Property alarm_application_name As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.alarm_application_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.alarm_application_nameColumn) = value
            End Set
        End Property
        
        Public Property alarm_application_args As String
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.alarm_application_argsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.alarm_application_argsColumn) = value
            End Set
        End Property
        
        Public Property alarm_was_dismissed As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAPPOINTMENT.alarm_was_dismissedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPPOINTMENT.alarm_was_dismissedColumn) = value
            End Set
        End Property
        
        Public Property ROOMRow As ROOMRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ROOM_APPOINTMENT")),ROOMRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ROOM_APPOINTMENT"))
            End Set
        End Property
        
        Public Function IssubjectNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.subjectColumn)
        End Function
        
        Public Sub SetsubjectNull()
            Me(Me.tableAPPOINTMENT.subjectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotesNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.notesColumn)
        End Function
        
        Public Sub SetnotesNull()
            Me(Me.tableAPPOINTMENT.notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstooltiptextNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.tooltiptextColumn)
        End Function
        
        Public Sub SettooltiptextNull()
            Me(Me.tableAPPOINTMENT.tooltiptextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvisibleNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.visibleColumn)
        End Function
        
        Public Sub SetvisibleNull()
            Me(Me.tableAPPOINTMENT.visibleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsblockoutNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.blockoutColumn)
        End Function
        
        Public Sub SetblockoutNull()
            Me(Me.tableAPPOINTMENT.blockoutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsiseventNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.iseventColumn)
        End Function
        
        Public Sub SetiseventNull()
            Me(Me.tableAPPOINTMENT.iseventColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsisflaggedNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.isflaggedColumn)
        End Function
        
        Public Sub SetisflaggedNull()
            Me(Me.tableAPPOINTMENT.isflaggedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsisreadonlyNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.isreadonlyColumn)
        End Function
        
        Public Sub SetisreadonlyNull()
            Me(Me.tableAPPOINTMENT.isreadonlyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaxlengthNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.maxlengthColumn)
        End Function
        
        Public Sub SetmaxlengthNull()
            Me(Me.tableAPPOINTMENT.maxlengthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsminlengthNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.minlengthColumn)
        End Function
        
        Public Sub SetminlengthNull()
            Me(Me.tableAPPOINTMENT.minlengthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriorityNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.priorityColumn)
        End Function
        
        Public Sub SetpriorityNull()
            Me(Me.tableAPPOINTMENT.priorityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isappearance_guidNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.appearance_guidColumn)
        End Function
        
        Public Sub Setappearance_guidNull()
            Me(Me.tableAPPOINTMENT.appearance_guidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isroom_guidNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.room_guidColumn)
        End Function
        
        Public Sub Setroom_guidNull()
            Me(Me.tableAPPOINTMENT.room_guidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isalarm_window_textNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.alarm_window_textColumn)
        End Function
        
        Public Sub Setalarm_window_textNull()
            Me(Me.tableAPPOINTMENT.alarm_window_textColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isalarm_is_armedNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.alarm_is_armedColumn)
        End Function
        
        Public Sub Setalarm_is_armedNull()
            Me(Me.tableAPPOINTMENT.alarm_is_armedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isalarm_reminderNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.alarm_reminderColumn)
        End Function
        
        Public Sub Setalarm_reminderNull()
            Me(Me.tableAPPOINTMENT.alarm_reminderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isalarm_allow_openNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.alarm_allow_openColumn)
        End Function
        
        Public Sub Setalarm_allow_openNull()
            Me(Me.tableAPPOINTMENT.alarm_allow_openColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isalarm_allow_snoozeNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.alarm_allow_snoozeColumn)
        End Function
        
        Public Sub Setalarm_allow_snoozeNull()
            Me(Me.tableAPPOINTMENT.alarm_allow_snoozeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isalarm_application_nameNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.alarm_application_nameColumn)
        End Function
        
        Public Sub Setalarm_application_nameNull()
            Me(Me.tableAPPOINTMENT.alarm_application_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isalarm_application_argsNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.alarm_application_argsColumn)
        End Function
        
        Public Sub Setalarm_application_argsNull()
            Me(Me.tableAPPOINTMENT.alarm_application_argsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isalarm_was_dismissedNull() As Boolean
            Return Me.IsNull(Me.tableAPPOINTMENT.alarm_was_dismissedColumn)
        End Function
        
        Public Sub Setalarm_was_dismissedNull()
            Me(Me.tableAPPOINTMENT.alarm_was_dismissedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAPPOINTMENT_CATEGORYRows() As APPOINTMENT_CATEGORYRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FK_APPOINTMENT_APPOINTMENT_CATEGORY")),APPOINTMENT_CATEGORYRow())
        End Function
        
        Public Function GetAPPOINTMENT_PROVIDERRows() As APPOINTMENT_PROVIDERRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FK_APPOINTMENT_APPOINTMENT_PROVIDER")),APPOINTMENT_PROVIDERRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As APPOINTMENTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As APPOINTMENTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As APPOINTMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENT_CATEGORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnappointment_guid As DataColumn
        
        Private columncategory_guid As DataColumn
        
        Friend Sub New()
            MyBase.New("APPOINTMENT_CATEGORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property appointment_guidColumn As DataColumn
            Get
                Return Me.columnappointment_guid
            End Get
        End Property
        
        Friend ReadOnly Property category_guidColumn As DataColumn
            Get
                Return Me.columncategory_guid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As APPOINTMENT_CATEGORYRow
            Get
                Return CType(Me.Rows(index),APPOINTMENT_CATEGORYRow)
            End Get
        End Property
        
        Public Event APPOINTMENT_CATEGORYRowChanged As APPOINTMENT_CATEGORYRowChangeEventHandler
        
        Public Event APPOINTMENT_CATEGORYRowChanging As APPOINTMENT_CATEGORYRowChangeEventHandler
        
        Public Event APPOINTMENT_CATEGORYRowDeleted As APPOINTMENT_CATEGORYRowChangeEventHandler
        
        Public Event APPOINTMENT_CATEGORYRowDeleting As APPOINTMENT_CATEGORYRowChangeEventHandler
        
        Public Overloads Sub AddAPPOINTMENT_CATEGORYRow(ByVal row As APPOINTMENT_CATEGORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAPPOINTMENT_CATEGORYRow(ByVal parentAPPOINTMENTRowByFK_APPOINTMENT_APPOINTMENT_CATEGORY As APPOINTMENTRow, ByVal parentCATEGORYRowByFK_CATEGORY_APPOINTMENT_CATEGORY As CATEGORYRow) As APPOINTMENT_CATEGORYRow
            Dim rowAPPOINTMENT_CATEGORYRow As APPOINTMENT_CATEGORYRow = CType(Me.NewRow,APPOINTMENT_CATEGORYRow)
            rowAPPOINTMENT_CATEGORYRow.ItemArray = New Object() {parentAPPOINTMENTRowByFK_APPOINTMENT_APPOINTMENT_CATEGORY(0), parentCATEGORYRowByFK_CATEGORY_APPOINTMENT_CATEGORY(1)}
            Me.Rows.Add(rowAPPOINTMENT_CATEGORYRow)
            Return rowAPPOINTMENT_CATEGORYRow
        End Function
        
        Public Function FindByappointment_guidcategory_guid(ByVal appointment_guid As String, ByVal category_guid As String) As APPOINTMENT_CATEGORYRow
            Return CType(Me.Rows.Find(New Object() {appointment_guid, category_guid}),APPOINTMENT_CATEGORYRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As APPOINTMENT_CATEGORYDataTable = CType(MyBase.Clone,APPOINTMENT_CATEGORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New APPOINTMENT_CATEGORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnappointment_guid = Me.Columns("appointment_guid")
            Me.columncategory_guid = Me.Columns("category_guid")
        End Sub
        
        Private Sub InitClass()
            Me.columnappointment_guid = New DataColumn("appointment_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnappointment_guid)
            Me.columncategory_guid = New DataColumn("category_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncategory_guid)
            Me.Constraints.Add(New UniqueConstraint("PK_APPOINTMENT_CATEGORY", New DataColumn() {Me.columnappointment_guid, Me.columncategory_guid}, true))
            Me.columnappointment_guid.AllowDBNull = false
            Me.columncategory_guid.AllowDBNull = false
        End Sub
        
        Public Function NewAPPOINTMENT_CATEGORYRow() As APPOINTMENT_CATEGORYRow
            Return CType(Me.NewRow,APPOINTMENT_CATEGORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New APPOINTMENT_CATEGORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(APPOINTMENT_CATEGORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.APPOINTMENT_CATEGORYRowChangedEvent) Is Nothing) Then
                RaiseEvent APPOINTMENT_CATEGORYRowChanged(Me, New APPOINTMENT_CATEGORYRowChangeEvent(CType(e.Row,APPOINTMENT_CATEGORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.APPOINTMENT_CATEGORYRowChangingEvent) Is Nothing) Then
                RaiseEvent APPOINTMENT_CATEGORYRowChanging(Me, New APPOINTMENT_CATEGORYRowChangeEvent(CType(e.Row,APPOINTMENT_CATEGORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.APPOINTMENT_CATEGORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent APPOINTMENT_CATEGORYRowDeleted(Me, New APPOINTMENT_CATEGORYRowChangeEvent(CType(e.Row,APPOINTMENT_CATEGORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.APPOINTMENT_CATEGORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent APPOINTMENT_CATEGORYRowDeleting(Me, New APPOINTMENT_CATEGORYRowChangeEvent(CType(e.Row,APPOINTMENT_CATEGORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAPPOINTMENT_CATEGORYRow(ByVal row As APPOINTMENT_CATEGORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENT_CATEGORYRow
        Inherits DataRow
        
        Private tableAPPOINTMENT_CATEGORY As APPOINTMENT_CATEGORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAPPOINTMENT_CATEGORY = CType(Me.Table,APPOINTMENT_CATEGORYDataTable)
        End Sub
        
        Public Property appointment_guid As String
            Get
                Return CType(Me(Me.tableAPPOINTMENT_CATEGORY.appointment_guidColumn),String)
            End Get
            Set
                Me(Me.tableAPPOINTMENT_CATEGORY.appointment_guidColumn) = value
            End Set
        End Property
        
        Public Property category_guid As String
            Get
                Return CType(Me(Me.tableAPPOINTMENT_CATEGORY.category_guidColumn),String)
            End Get
            Set
                Me(Me.tableAPPOINTMENT_CATEGORY.category_guidColumn) = value
            End Set
        End Property
        
        Public Property CATEGORYRow As CATEGORYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CATEGORY_APPOINTMENT_CATEGORY")),CATEGORYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CATEGORY_APPOINTMENT_CATEGORY"))
            End Set
        End Property
        
        Public Property APPOINTMENTRow As APPOINTMENTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_APPOINTMENT_APPOINTMENT_CATEGORY")),APPOINTMENTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_APPOINTMENT_APPOINTMENT_CATEGORY"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENT_CATEGORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As APPOINTMENT_CATEGORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As APPOINTMENT_CATEGORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As APPOINTMENT_CATEGORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENT_PROVIDERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnappointment_guid As DataColumn
        
        Private columnprovider_guid As DataColumn
        
        Friend Sub New()
            MyBase.New("APPOINTMENT_PROVIDER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property appointment_guidColumn As DataColumn
            Get
                Return Me.columnappointment_guid
            End Get
        End Property
        
        Friend ReadOnly Property provider_guidColumn As DataColumn
            Get
                Return Me.columnprovider_guid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As APPOINTMENT_PROVIDERRow
            Get
                Return CType(Me.Rows(index),APPOINTMENT_PROVIDERRow)
            End Get
        End Property
        
        Public Event APPOINTMENT_PROVIDERRowChanged As APPOINTMENT_PROVIDERRowChangeEventHandler
        
        Public Event APPOINTMENT_PROVIDERRowChanging As APPOINTMENT_PROVIDERRowChangeEventHandler
        
        Public Event APPOINTMENT_PROVIDERRowDeleted As APPOINTMENT_PROVIDERRowChangeEventHandler
        
        Public Event APPOINTMENT_PROVIDERRowDeleting As APPOINTMENT_PROVIDERRowChangeEventHandler
        
        Public Overloads Sub AddAPPOINTMENT_PROVIDERRow(ByVal row As APPOINTMENT_PROVIDERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAPPOINTMENT_PROVIDERRow(ByVal parentAPPOINTMENTRowByFK_APPOINTMENT_APPOINTMENT_PROVIDER As APPOINTMENTRow, ByVal parentPROVIDERRowByFK_PROVIDER_APPOINTMENT_PROVIDER As PROVIDERRow) As APPOINTMENT_PROVIDERRow
            Dim rowAPPOINTMENT_PROVIDERRow As APPOINTMENT_PROVIDERRow = CType(Me.NewRow,APPOINTMENT_PROVIDERRow)
            rowAPPOINTMENT_PROVIDERRow.ItemArray = New Object() {parentAPPOINTMENTRowByFK_APPOINTMENT_APPOINTMENT_PROVIDER(0), parentPROVIDERRowByFK_PROVIDER_APPOINTMENT_PROVIDER(1)}
            Me.Rows.Add(rowAPPOINTMENT_PROVIDERRow)
            Return rowAPPOINTMENT_PROVIDERRow
        End Function
        
        Public Function FindByappointment_guidprovider_guid(ByVal appointment_guid As String, ByVal provider_guid As String) As APPOINTMENT_PROVIDERRow
            Return CType(Me.Rows.Find(New Object() {appointment_guid, provider_guid}),APPOINTMENT_PROVIDERRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As APPOINTMENT_PROVIDERDataTable = CType(MyBase.Clone,APPOINTMENT_PROVIDERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New APPOINTMENT_PROVIDERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnappointment_guid = Me.Columns("appointment_guid")
            Me.columnprovider_guid = Me.Columns("provider_guid")
        End Sub
        
        Private Sub InitClass()
            Me.columnappointment_guid = New DataColumn("appointment_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnappointment_guid)
            Me.columnprovider_guid = New DataColumn("provider_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprovider_guid)
            Me.Constraints.Add(New UniqueConstraint("PK_APPOINTMENT_PROVIDER", New DataColumn() {Me.columnappointment_guid, Me.columnprovider_guid}, true))
            Me.columnappointment_guid.AllowDBNull = false
            Me.columnprovider_guid.AllowDBNull = false
        End Sub
        
        Public Function NewAPPOINTMENT_PROVIDERRow() As APPOINTMENT_PROVIDERRow
            Return CType(Me.NewRow,APPOINTMENT_PROVIDERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New APPOINTMENT_PROVIDERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(APPOINTMENT_PROVIDERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.APPOINTMENT_PROVIDERRowChangedEvent) Is Nothing) Then
                RaiseEvent APPOINTMENT_PROVIDERRowChanged(Me, New APPOINTMENT_PROVIDERRowChangeEvent(CType(e.Row,APPOINTMENT_PROVIDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.APPOINTMENT_PROVIDERRowChangingEvent) Is Nothing) Then
                RaiseEvent APPOINTMENT_PROVIDERRowChanging(Me, New APPOINTMENT_PROVIDERRowChangeEvent(CType(e.Row,APPOINTMENT_PROVIDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.APPOINTMENT_PROVIDERRowDeletedEvent) Is Nothing) Then
                RaiseEvent APPOINTMENT_PROVIDERRowDeleted(Me, New APPOINTMENT_PROVIDERRowChangeEvent(CType(e.Row,APPOINTMENT_PROVIDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.APPOINTMENT_PROVIDERRowDeletingEvent) Is Nothing) Then
                RaiseEvent APPOINTMENT_PROVIDERRowDeleting(Me, New APPOINTMENT_PROVIDERRowChangeEvent(CType(e.Row,APPOINTMENT_PROVIDERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAPPOINTMENT_PROVIDERRow(ByVal row As APPOINTMENT_PROVIDERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENT_PROVIDERRow
        Inherits DataRow
        
        Private tableAPPOINTMENT_PROVIDER As APPOINTMENT_PROVIDERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAPPOINTMENT_PROVIDER = CType(Me.Table,APPOINTMENT_PROVIDERDataTable)
        End Sub
        
        Public Property appointment_guid As String
            Get
                Return CType(Me(Me.tableAPPOINTMENT_PROVIDER.appointment_guidColumn),String)
            End Get
            Set
                Me(Me.tableAPPOINTMENT_PROVIDER.appointment_guidColumn) = value
            End Set
        End Property
        
        Public Property provider_guid As String
            Get
                Return CType(Me(Me.tableAPPOINTMENT_PROVIDER.provider_guidColumn),String)
            End Get
            Set
                Me(Me.tableAPPOINTMENT_PROVIDER.provider_guidColumn) = value
            End Set
        End Property
        
        Public Property PROVIDERRow As PROVIDERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PROVIDER_APPOINTMENT_PROVIDER")),PROVIDERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PROVIDER_APPOINTMENT_PROVIDER"))
            End Set
        End Property
        
        Public Property APPOINTMENTRow As APPOINTMENTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_APPOINTMENT_APPOINTMENT_PROVIDER")),APPOINTMENTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_APPOINTMENT_APPOINTMENT_PROVIDER"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class APPOINTMENT_PROVIDERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As APPOINTMENT_PROVIDERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As APPOINTMENT_PROVIDERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As APPOINTMENT_PROVIDERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CATEGORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnaccount_guid As DataColumn
        
        Private columncategory_guid As DataColumn
        
        Private columnname As DataColumn
        
        Private columncolor As DataColumn
        
        Private columnnotes As DataColumn
        
        Friend Sub New()
            MyBase.New("CATEGORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property account_guidColumn As DataColumn
            Get
                Return Me.columnaccount_guid
            End Get
        End Property
        
        Friend ReadOnly Property category_guidColumn As DataColumn
            Get
                Return Me.columncategory_guid
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property colorColumn As DataColumn
            Get
                Return Me.columncolor
            End Get
        End Property
        
        Friend ReadOnly Property notesColumn As DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CATEGORYRow
            Get
                Return CType(Me.Rows(index),CATEGORYRow)
            End Get
        End Property
        
        Public Event CATEGORYRowChanged As CATEGORYRowChangeEventHandler
        
        Public Event CATEGORYRowChanging As CATEGORYRowChangeEventHandler
        
        Public Event CATEGORYRowDeleted As CATEGORYRowChangeEventHandler
        
        Public Event CATEGORYRowDeleting As CATEGORYRowChangeEventHandler
        
        Public Overloads Sub AddCATEGORYRow(ByVal row As CATEGORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCATEGORYRow(ByVal account_guid As String, ByVal category_guid As String, ByVal name As String, ByVal color As Integer, ByVal notes As String) As CATEGORYRow
            Dim rowCATEGORYRow As CATEGORYRow = CType(Me.NewRow,CATEGORYRow)
            rowCATEGORYRow.ItemArray = New Object() {account_guid, category_guid, name, color, notes}
            Me.Rows.Add(rowCATEGORYRow)
            Return rowCATEGORYRow
        End Function
        
        Public Function FindBycategory_guid(ByVal category_guid As String) As CATEGORYRow
            Return CType(Me.Rows.Find(New Object() {category_guid}),CATEGORYRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CATEGORYDataTable = CType(MyBase.Clone,CATEGORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CATEGORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnaccount_guid = Me.Columns("account_guid")
            Me.columncategory_guid = Me.Columns("category_guid")
            Me.columnname = Me.Columns("name")
            Me.columncolor = Me.Columns("color")
            Me.columnnotes = Me.Columns("notes")
        End Sub
        
        Private Sub InitClass()
            Me.columnaccount_guid = New DataColumn("account_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaccount_guid)
            Me.columncategory_guid = New DataColumn("category_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncategory_guid)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncolor = New DataColumn("color", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncolor)
            Me.columnnotes = New DataColumn("notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotes)
            Me.Constraints.Add(New UniqueConstraint("PK_CATEGORY", New DataColumn() {Me.columncategory_guid}, true))
            Me.columncategory_guid.AllowDBNull = false
            Me.columncategory_guid.Unique = true
            Me.columnname.AllowDBNull = false
            Me.columncolor.AllowDBNull = false
        End Sub
        
        Public Function NewCATEGORYRow() As CATEGORYRow
            Return CType(Me.NewRow,CATEGORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CATEGORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CATEGORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CATEGORYRowChangedEvent) Is Nothing) Then
                RaiseEvent CATEGORYRowChanged(Me, New CATEGORYRowChangeEvent(CType(e.Row,CATEGORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CATEGORYRowChangingEvent) Is Nothing) Then
                RaiseEvent CATEGORYRowChanging(Me, New CATEGORYRowChangeEvent(CType(e.Row,CATEGORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CATEGORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent CATEGORYRowDeleted(Me, New CATEGORYRowChangeEvent(CType(e.Row,CATEGORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CATEGORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent CATEGORYRowDeleting(Me, New CATEGORYRowChangeEvent(CType(e.Row,CATEGORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCATEGORYRow(ByVal row As CATEGORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CATEGORYRow
        Inherits DataRow
        
        Private tableCATEGORY As CATEGORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCATEGORY = CType(Me.Table,CATEGORYDataTable)
        End Sub
        
        Public Property account_guid As String
            Get
                Try 
                    Return CType(Me(Me.tableCATEGORY.account_guidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCATEGORY.account_guidColumn) = value
            End Set
        End Property
        
        Public Property category_guid As String
            Get
                Return CType(Me(Me.tableCATEGORY.category_guidColumn),String)
            End Get
            Set
                Me(Me.tableCATEGORY.category_guidColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Return CType(Me(Me.tableCATEGORY.nameColumn),String)
            End Get
            Set
                Me(Me.tableCATEGORY.nameColumn) = value
            End Set
        End Property
        
        Public Property color As Integer
            Get
                Return CType(Me(Me.tableCATEGORY.colorColumn),Integer)
            End Get
            Set
                Me(Me.tableCATEGORY.colorColumn) = value
            End Set
        End Property
        
        Public Property notes As String
            Get
                Try 
                    Return CType(Me(Me.tableCATEGORY.notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCATEGORY.notesColumn) = value
            End Set
        End Property
        
        Public Function Isaccount_guidNull() As Boolean
            Return Me.IsNull(Me.tableCATEGORY.account_guidColumn)
        End Function
        
        Public Sub Setaccount_guidNull()
            Me(Me.tableCATEGORY.account_guidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotesNull() As Boolean
            Return Me.IsNull(Me.tableCATEGORY.notesColumn)
        End Function
        
        Public Sub SetnotesNull()
            Me(Me.tableCATEGORY.notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAPPOINTMENT_CATEGORYRows() As APPOINTMENT_CATEGORYRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FK_CATEGORY_APPOINTMENT_CATEGORY")),APPOINTMENT_CATEGORYRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CATEGORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CATEGORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CATEGORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CATEGORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PROVIDERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnaccount_guid As DataColumn
        
        Private columnprovider_guid As DataColumn
        
        Private columnname As DataColumn
        
        Private columncolor As DataColumn
        
        Private columnnotes As DataColumn
        
        Friend Sub New()
            MyBase.New("PROVIDER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property account_guidColumn As DataColumn
            Get
                Return Me.columnaccount_guid
            End Get
        End Property
        
        Friend ReadOnly Property provider_guidColumn As DataColumn
            Get
                Return Me.columnprovider_guid
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property colorColumn As DataColumn
            Get
                Return Me.columncolor
            End Get
        End Property
        
        Friend ReadOnly Property notesColumn As DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROVIDERRow
            Get
                Return CType(Me.Rows(index),PROVIDERRow)
            End Get
        End Property
        
        Public Event PROVIDERRowChanged As PROVIDERRowChangeEventHandler
        
        Public Event PROVIDERRowChanging As PROVIDERRowChangeEventHandler
        
        Public Event PROVIDERRowDeleted As PROVIDERRowChangeEventHandler
        
        Public Event PROVIDERRowDeleting As PROVIDERRowChangeEventHandler
        
        Public Overloads Sub AddPROVIDERRow(ByVal row As PROVIDERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPROVIDERRow(ByVal account_guid As String, ByVal provider_guid As String, ByVal name As String, ByVal color As Integer, ByVal notes As String) As PROVIDERRow
            Dim rowPROVIDERRow As PROVIDERRow = CType(Me.NewRow,PROVIDERRow)
            rowPROVIDERRow.ItemArray = New Object() {account_guid, provider_guid, name, color, notes}
            Me.Rows.Add(rowPROVIDERRow)
            Return rowPROVIDERRow
        End Function
        
        Public Function FindByprovider_guid(ByVal provider_guid As String) As PROVIDERRow
            Return CType(Me.Rows.Find(New Object() {provider_guid}),PROVIDERRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PROVIDERDataTable = CType(MyBase.Clone,PROVIDERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PROVIDERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnaccount_guid = Me.Columns("account_guid")
            Me.columnprovider_guid = Me.Columns("provider_guid")
            Me.columnname = Me.Columns("name")
            Me.columncolor = Me.Columns("color")
            Me.columnnotes = Me.Columns("notes")
        End Sub
        
        Private Sub InitClass()
            Me.columnaccount_guid = New DataColumn("account_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaccount_guid)
            Me.columnprovider_guid = New DataColumn("provider_guid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprovider_guid)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncolor = New DataColumn("color", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncolor)
            Me.columnnotes = New DataColumn("notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotes)
            Me.Constraints.Add(New UniqueConstraint("PK_PROVIDER", New DataColumn() {Me.columnprovider_guid}, true))
            Me.columnprovider_guid.AllowDBNull = false
            Me.columnprovider_guid.Unique = true
            Me.columnname.AllowDBNull = false
            Me.columncolor.AllowDBNull = false
        End Sub
        
        Public Function NewPROVIDERRow() As PROVIDERRow
            Return CType(Me.NewRow,PROVIDERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PROVIDERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PROVIDERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROVIDERRowChangedEvent) Is Nothing) Then
                RaiseEvent PROVIDERRowChanged(Me, New PROVIDERRowChangeEvent(CType(e.Row,PROVIDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROVIDERRowChangingEvent) Is Nothing) Then
                RaiseEvent PROVIDERRowChanging(Me, New PROVIDERRowChangeEvent(CType(e.Row,PROVIDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROVIDERRowDeletedEvent) Is Nothing) Then
                RaiseEvent PROVIDERRowDeleted(Me, New PROVIDERRowChangeEvent(CType(e.Row,PROVIDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROVIDERRowDeletingEvent) Is Nothing) Then
                RaiseEvent PROVIDERRowDeleting(Me, New PROVIDERRowChangeEvent(CType(e.Row,PROVIDERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePROVIDERRow(ByVal row As PROVIDERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PROVIDERRow
        Inherits DataRow
        
        Private tablePROVIDER As PROVIDERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROVIDER = CType(Me.Table,PROVIDERDataTable)
        End Sub
        
        Public Property account_guid As String
            Get
                Try 
                    Return CType(Me(Me.tablePROVIDER.account_guidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVIDER.account_guidColumn) = value
            End Set
        End Property
        
        Public Property provider_guid As String
            Get
                Return CType(Me(Me.tablePROVIDER.provider_guidColumn),String)
            End Get
            Set
                Me(Me.tablePROVIDER.provider_guidColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Return CType(Me(Me.tablePROVIDER.nameColumn),String)
            End Get
            Set
                Me(Me.tablePROVIDER.nameColumn) = value
            End Set
        End Property
        
        Public Property color As Integer
            Get
                Return CType(Me(Me.tablePROVIDER.colorColumn),Integer)
            End Get
            Set
                Me(Me.tablePROVIDER.colorColumn) = value
            End Set
        End Property
        
        Public Property notes As String
            Get
                Try 
                    Return CType(Me(Me.tablePROVIDER.notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVIDER.notesColumn) = value
            End Set
        End Property
        
        Public Function Isaccount_guidNull() As Boolean
            Return Me.IsNull(Me.tablePROVIDER.account_guidColumn)
        End Function
        
        Public Sub Setaccount_guidNull()
            Me(Me.tablePROVIDER.account_guidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotesNull() As Boolean
            Return Me.IsNull(Me.tablePROVIDER.notesColumn)
        End Function
        
        Public Sub SetnotesNull()
            Me(Me.tablePROVIDER.notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAPPOINTMENT_PROVIDERRows() As APPOINTMENT_PROVIDERRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FK_PROVIDER_APPOINTMENT_PROVIDER")),APPOINTMENT_PROVIDERRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PROVIDERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PROVIDERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PROVIDERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PROVIDERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
